
RECEIVER_CONTROLLER_NODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0000260c  000026a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000260c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000050ed  00800204  00800204  000026a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a1fc  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f4c  00000000  00000000  0000d000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c9f7  00000000  00000000  00010f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001778  00000000  00000000  0001d944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001f86d  00000000  00000000  0001f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000062bf  00000000  00000000  0003e929  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000660  00000000  00000000  00044be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b12e  00000000  00000000  00045248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__vector_17>
      48:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__vector_18>
      4c:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__vector_19>
      50:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__vector_20>
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__vector_32>
      84:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__vector_33>
      88:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__vector_34>
      8c:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_35>
      90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__vector_42>
      ac:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__vector_43>
      b0:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__vector_44>
      b4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__vector_45>
      b8:	7d c0       	rjmp	.+250    	; 0x1b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_47>
      c0:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__vector_48>
      c4:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__vector_49>
      c8:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__vector_50>
      cc:	73 c0       	rjmp	.+230    	; 0x1b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	71 c0       	rjmp	.+226    	; 0x1b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6d c0       	rjmp	.+218    	; 0x1b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	6b c0       	rjmp	.+214    	; 0x1b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	69 c0       	rjmp	.+210    	; 0x1b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_57>
      e8:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_58>
      ec:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_59>
      f0:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_60>
      f4:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__vector_61>
      f8:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_62>
      fc:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_63>
     100:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_64>
     104:	57 c0       	rjmp	.+174    	; 0x1b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c0       	rjmp	.+170    	; 0x1b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c0       	rjmp	.+166    	; 0x1b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c0       	rjmp	.+162    	; 0x1b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c0       	rjmp	.+158    	; 0x1b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__vector_70>
     11c:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__vector_71>
     120:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_72>
     124:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__vector_73>
     128:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__vector_74>
     12c:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_75>
     130:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_76>
     134:	09 06       	cpc	r0, r25
     136:	30 06       	cpc	r3, r16
     138:	24 06       	cpc	r2, r20
     13a:	3d 06       	cpc	r3, r29
     13c:	24 06       	cpc	r2, r20
     13e:	fc 05       	cpc	r31, r12
     140:	16 06       	cpc	r1, r22
     142:	24 06       	cpc	r2, r20
     144:	24 06       	cpc	r2, r20
     146:	24 06       	cpc	r2, r20
     148:	24 06       	cpc	r2, r20
     14a:	24 06       	cpc	r2, r20
     14c:	d0 05       	cpc	r29, r0
     14e:	24 06       	cpc	r2, r20
     150:	24 06       	cpc	r2, r20
     152:	24 06       	cpc	r2, r20
     154:	24 06       	cpc	r2, r20
     156:	24 06       	cpc	r2, r20
     158:	24 06       	cpc	r2, r20
     15a:	5c 06       	cpc	r5, r28
     15c:	24 06       	cpc	r2, r20
     15e:	24 06       	cpc	r2, r20
     160:	95 06       	cpc	r9, r21

00000162 <__trampolines_end>:
     162:	04 03       	mulsu	r16, r20
     164:	03 02       	muls	r16, r19
     166:	02 01       	movw	r0, r4
     168:	00 ff       	sbrs	r16, 0
     16a:	fe fd       	.word	0xfdfe	; ????
     16c:	fc fb       	.word	0xfbfc	; ????
     16e:	f9 f7       	brne	.-2      	; 0x16e <__trampolines_end+0xc>
     170:	f4 ef       	ldi	r31, 0xF4	; 244

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d1 e8       	ldi	r29, 0x81	; 129
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0c bf       	out	0x3c, r16	; 60

00000182 <__do_copy_data>:
     182:	12 e0       	ldi	r17, 0x02	; 2
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b2 e0       	ldi	r27, 0x02	; 2
     188:	ec e0       	ldi	r30, 0x0C	; 12
     18a:	f6 e2       	ldi	r31, 0x26	; 38
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0b bf       	out	0x3b, r16	; 59
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
     192:	07 90       	elpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a4 30       	cpi	r26, 0x04	; 4
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
     19c:	22 e5       	ldi	r18, 0x52	; 82
     19e:	a4 e0       	ldi	r26, 0x04	; 4
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	a1 3f       	cpi	r26, 0xF1	; 241
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <main>
     1b0:	0c 94 04 13 	jmp	0x2608	; 0x2608 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <common_tc_read_count>:
     1b6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <tmr_read_count>
     1ba:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <timer_mul_var>
     1be:	22 23       	and	r18, r18
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <common_tc_read_count+0x42>
     1c2:	40 91 f0 52 	lds	r20, 0x52F0	; 0x8052f0 <timer_multiplier>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <timer_mul_var>
     1cc:	64 2f       	mov	r22, r20
     1ce:	73 2f       	mov	r23, r19
     1d0:	0e 94 02 12 	call	0x2404	; 0x2404 <__udivmodhi4>
     1d4:	fb 01       	movw	r30, r22
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	64 2f       	mov	r22, r20
     1dc:	73 2f       	mov	r23, r19
     1de:	0e 94 02 12 	call	0x2404	; 0x2404 <__udivmodhi4>
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	62 9f       	mul	r22, r18
     1e6:	c0 01       	movw	r24, r0
     1e8:	63 9f       	mul	r22, r19
     1ea:	90 0d       	add	r25, r0
     1ec:	72 9f       	mul	r23, r18
     1ee:	90 0d       	add	r25, r0
     1f0:	11 24       	eor	r1, r1
     1f2:	8e 0f       	add	r24, r30
     1f4:	9f 1f       	adc	r25, r31
     1f6:	08 95       	ret
     1f8:	60 91 f0 52 	lds	r22, 0x52F0	; 0x8052f0 <timer_multiplier>
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 02 12 	call	0x2404	; 0x2404 <__udivmodhi4>
     202:	cb 01       	movw	r24, r22
     204:	08 95       	ret

00000206 <common_tc_compare_stop>:
     206:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <tmr_disable_cc_interrupt>
     20a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <save_cpu_interrupt>
     20e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
     212:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
     216:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end+0x2>
     21a:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x3>
     21e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <compare_value+0x1>
     222:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <compare_value>
     226:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <restore_cpu_interrupt>

0000022a <common_tc_overflow_stop>:
     22a:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <tmr_disable_ovf_interrupt>
     22e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     232:	08 95       	ret

00000234 <common_tc_stop>:
     234:	e8 df       	rcall	.-48     	; 0x206 <common_tc_compare_stop>
     236:	f9 df       	rcall	.-14     	; 0x22a <common_tc_overflow_stop>
     238:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <tmr_stop>

0000023c <common_tc_delay>:
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <tmr_read_count>
     24a:	8c 01       	movw	r16, r24
     24c:	be 01       	movw	r22, r28
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	20 91 f0 52 	lds	r18, 0x52F0	; 0x8052f0 <timer_multiplier>
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__mulsi3>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	a8 01       	movw	r20, r16
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	48 0f       	add	r20, r24
     26c:	59 1f       	adc	r21, r25
     26e:	6a 1f       	adc	r22, r26
     270:	7b 1f       	adc	r23, r27
     272:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <__data_end>
     276:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <__data_end+0x1>
     27a:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <__data_end+0x2>
     27e:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <__data_end+0x3>
     282:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     286:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     28a:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     28e:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     292:	ab 01       	movw	r20, r22
     294:	66 27       	eor	r22, r22
     296:	77 27       	eor	r23, r23
     298:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <__data_end>
     29c:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <__data_end+0x1>
     2a0:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <__data_end+0x2>
     2a4:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <__data_end+0x3>
     2a8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     2ac:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     2b0:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     2b4:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     2b8:	41 15       	cp	r20, r1
     2ba:	51 05       	cpc	r21, r1
     2bc:	61 05       	cpc	r22, r1
     2be:	71 05       	cpc	r23, r1
     2c0:	91 f0       	breq	.+36     	; 0x2e6 <common_tc_delay+0xaa>
     2c2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     2c6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     2ca:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     2ce:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	08 0f       	add	r16, r24
     2d6:	19 1f       	adc	r17, r25
     2d8:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <compare_value+0x1>
     2dc:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <compare_value>
     2e0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <tmr_disable_cc_interrupt>
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <common_tc_delay+0xba>
     2e6:	08 0f       	add	r16, r24
     2e8:	19 1f       	adc	r17, r25
     2ea:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <compare_value+0x1>
     2ee:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <compare_value>
     2f2:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <tmr_enable_cc_interrupt>
     2f6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <compare_value>
     2fa:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <compare_value+0x1>
     2fe:	84 36       	cpi	r24, 0x64	; 100
     300:	91 05       	cpc	r25, r1
     302:	30 f4       	brcc	.+12     	; 0x310 <common_tc_delay+0xd4>
     304:	8c 59       	subi	r24, 0x9C	; 156
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <compare_value+0x1>
     30c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <compare_value>
     310:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <compare_value>
     314:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <compare_value+0x1>
     318:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <tmr_write_cmpreg>
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <common_tc_init>:
     326:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     32a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <tmr_init>
     32e:	80 93 f0 52 	sts	0x52F0, r24	; 0x8052f0 <timer_multiplier>
     332:	08 95       	ret

00000334 <tmr_ovf_callback>:
     334:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     338:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     33c:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     340:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 05       	cpc	r26, r1
     348:	b1 05       	cpc	r27, r1
     34a:	c9 f0       	breq	.+50     	; 0x37e <tmr_ovf_callback+0x4a>
     34c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     350:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     354:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     358:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	a1 09       	sbc	r26, r1
     360:	b1 09       	sbc	r27, r1
     362:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
     366:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
     36a:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end+0x2>
     36e:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x3>
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	a1 05       	cpc	r26, r1
     376:	b1 05       	cpc	r27, r1
     378:	11 f4       	brne	.+4      	; 0x37e <tmr_ovf_callback+0x4a>
     37a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <tmr_enable_cc_interrupt>
     37e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <timer_mul_var>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_mul_var>
     388:	90 91 f0 52 	lds	r25, 0x52F0	; 0x8052f0 <timer_multiplier>
     38c:	89 17       	cp	r24, r25
     38e:	48 f0       	brcs	.+18     	; 0x3a2 <tmr_ovf_callback+0x6e>
     390:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     394:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <common_tc_ovf_callback>
     398:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <common_tc_ovf_callback+0x1>
     39c:	30 97       	sbiw	r30, 0x00	; 0
     39e:	09 f0       	breq	.+2      	; 0x3a2 <tmr_ovf_callback+0x6e>
     3a0:	19 95       	eicall
     3a2:	08 95       	ret

000003a4 <tmr_cca_callback>:
     3a4:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <tmr_disable_cc_interrupt>
     3a8:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <common_tc_cca_callback>
     3ac:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <common_tc_cca_callback+0x1>
     3b0:	30 97       	sbiw	r30, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <tmr_cca_callback+0x12>
     3b4:	19 95       	eicall
     3b6:	08 95       	ret

000003b8 <set_common_tc_overflow_callback>:
     3b8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <common_tc_ovf_callback+0x1>
     3bc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <common_tc_ovf_callback>
     3c0:	08 95       	ret

000003c2 <set_common_tc_expiry_callback>:
     3c2:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <common_tc_cca_callback+0x1>
     3c6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <common_tc_cca_callback>
     3ca:	08 95       	ret

000003cc <usr_wireless_app_task>:
//When data is received from the application, it is stored. If the \t symbol is received, it transmits a connection
//confirmation message and the stored data to the external node. If \r is received, it sends stored data to the application
//in blocks of 256 bytes. And if it receives \b, it sends the node's source address to the application.

void usr_wireless_app_task(void)
{
     3cc:	08 95       	ret

000003ce <usr_frame_received_cb>:
//The usr_frame_received_cb function handles frame reception. It transmits the received data to the host, clears the previous reception structure,
//copies the information from the received frame, and verifies if it belongs to the transmitter node. If so, it activates indicator LEDs, extracts
//the frame's energy level, verifies the frame's size, and stores the data along with the energy level in a storage vector.

void usr_frame_received_cb(frame_info_t *frame)
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	9c 01       	movw	r18, r24
	// Setting up the reception vector
	memset(&received_frame,0,sizeof(received_frame));// Clear previous information from the reception structure
     3d4:	c6 ef       	ldi	r28, 0xF6	; 246
     3d6:	d3 e0       	ldi	r29, 0x03	; 3
     3d8:	81 e7       	ldi	r24, 0x71	; 113
     3da:	de 01       	movw	r26, r28
     3dc:	1d 92       	st	X+, r1
     3de:	8a 95       	dec	r24
     3e0:	e9 f7       	brne	.-6      	; 0x3dc <usr_frame_received_cb+0xe>
	memcpy(&received_frame,frame->mpdu,sizeof(received_frame));// Copy the information from the source memory (buffer) to the destination
     3e2:	d9 01       	movw	r26, r18
     3e4:	17 96       	adiw	r26, 0x07	; 7
     3e6:	ed 91       	ld	r30, X+
     3e8:	fc 91       	ld	r31, X
     3ea:	18 97       	sbiw	r26, 0x08	; 8
     3ec:	91 e7       	ldi	r25, 0x71	; 113
     3ee:	de 01       	movw	r26, r28
     3f0:	01 90       	ld	r0, Z+
     3f2:	0d 92       	st	X+, r0
     3f4:	9a 95       	dec	r25
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <usr_frame_received_cb+0x22>
	// Verify if the received data belongs to the transmitter
	if (received_frame.dir_source==0x0001 && (received_frame.payload_802_15_4[0]=='C'||received_frame.payload_802_15_4[0]=='L')) // Si se cumple esta condicion la trama es del nodo externo
     3f8:	88 85       	ldd	r24, Y+8	; 0x08
     3fa:	99 85       	ldd	r25, Y+9	; 0x09
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	c1 f5       	brne	.+112    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     400:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <received_frame+0xa>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	11 f0       	breq	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	8c 34       	cpi	r24, 0x4C	; 76
     40a:	91 f5       	brne	.+100    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
     40c:	80 e4       	ldi	r24, 0x40	; 64
     40e:	89 b9       	out	0x09, r24	; 9
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     410:	a2 9a       	sbi	0x14, 2	; 20
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     412:	72 98       	cbi	0x0e, 2	; 14
	{
		LED_Toggle(LED0);
		LED_Off(LED1);
		LED_On(LED2);
		// Extraction of the energy level
		uint8_t *payload_ptr=frame->mpdu;
     414:	d9 01       	movw	r26, r18
     416:	17 96       	adiw	r26, 0x07	; 7
     418:	ed 91       	ld	r30, X+
     41a:	fc 91       	ld	r31, X
     41c:	18 97       	sbiw	r26, 0x08	; 8
		uint8_t mpdu_len =payload_ptr[0]+2;
		uint8_t frame_power=payload_ptr[mpdu_len];
     41e:	80 81       	ld	r24, Z
     420:	8e 5f       	subi	r24, 0xFE	; 254
     422:	e8 0f       	add	r30, r24
     424:	f1 1d       	adc	r31, r1
     426:	80 81       	ld	r24, Z
		received_frame.payload_802_15_4[14]=frame_power;
     428:	e6 ef       	ldi	r30, 0xF6	; 246
     42a:	f3 e0       	ldi	r31, 0x03	; 3
     42c:	80 8f       	std	Z+24, r24	; 0x18
		// Verification of the frame size
		int longTrRx=((int)received_frame.length0)-11;
     42e:	40 81       	ld	r20, Z
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	4b 50       	subi	r20, 0x0B	; 11
     434:	51 09       	sbc	r21, r1
		if (longTrRx==23||longTrRx==100)
     436:	47 31       	cpi	r20, 0x17	; 23
     438:	51 05       	cpc	r21, r1
     43a:	19 f0       	breq	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43c:	44 36       	cpi	r20, 0x64	; 100
     43e:	51 05       	cpc	r21, r1
     440:	b9 f4       	brne	.+46     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		{
			//Storage of each of the frames sent by the transmitter node along with its energy level
			for (int i = 0; i < longTrRx; i++)
			{
				storageVector[contSto+i]=received_frame.payload_802_15_4[i];
     442:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <contSto>
     446:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <contSto+0x1>
     44a:	a0 e0       	ldi	r26, 0x00	; 0
     44c:	b4 e0       	ldi	r27, 0x04	; 4
     44e:	fb 01       	movw	r30, r22
     450:	e9 59       	subi	r30, 0x99	; 153
     452:	fb 4f       	sbci	r31, 0xFB	; 251
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	2d 91       	ld	r18, X+
     45a:	21 93       	st	Z+, r18
		// Verification of the frame size
		int longTrRx=((int)received_frame.length0)-11;
		if (longTrRx==23||longTrRx==100)
		{
			//Storage of each of the frames sent by the transmitter node along with its energy level
			for (int i = 0; i < longTrRx; i++)
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	84 17       	cp	r24, r20
     460:	95 07       	cpc	r25, r21
     462:	d4 f3       	brlt	.-12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			{
				storageVector[contSto+i]=received_frame.payload_802_15_4[i];
			}
			contSto=contSto+longTrRx;
     464:	46 0f       	add	r20, r22
     466:	57 1f       	adc	r21, r23
     468:	50 93 10 02 	sts	0x0210, r21	; 0x800210 <contSto+0x1>
     46c:	40 93 0f 02 	sts	0x020F, r20	; 0x80020f <contSto>
		}
		//////////////////////////////////////////////////////////////////////////
	}
	//delay_ms(10);

}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <usr_frame_transmitted_cb>:

//The usr_frame_transmitted_cb function is called when a frame has been transmitted.

void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
     476:	08 95       	ret

00000478 <init_data_reception>:
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <tal_rx_enable>
     47e:	08 95       	ret

00000480 <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	00 d0       	rcall	.+0      	; 0x486 <wireless_init+0x6>
     486:	00 d0       	rcall	.+0      	; 0x488 <wireless_init+0x8>
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
	/*Initialize IRQ*/
	irq_initialize_vectors();

  sysclk_init();
     48c:	44 d0       	rcall	.+136    	; 0x516 <sysclk_init>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     48e:	36 d0       	rcall	.+108    	; 0x4fc <board_init>


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
     490:	b9 d1       	rcall	.+882    	; 0x804 <sw_timer_init>
     492:	8a d5       	rcall	.+2836   	; 0xfa8 <tal_init>
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
     494:	81 11       	cpse	r24, r1
     496:	ff cf       	rjmp	.-2      	; 0x496 <wireless_init+0x16>
     498:	78 94       	sei
     49a:	81 e0       	ldi	r24, 0x01	; 1
	{
	//Error in Initializing the TAL Layer
	app_alert();	
	}
	cpu_irq_enable();
     49c:	90 e0       	ldi	r25, 0x00	; 0
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
     49e:	9a 83       	std	Y+2, r25	; 0x02
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	8e ef       	ldi	r24, 0xFE	; 254
     4a4:	9a ec       	ldi	r25, 0xCA	; 202
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
     4a6:	9c 83       	std	Y+4, r25	; 0x04
     4a8:	8b 83       	std	Y+3, r24	; 0x03
     4aa:	8b e0       	ldi	r24, 0x0B	; 11
     4ac:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
     4ae:	1e 82       	std	Y+6, r1	; 0x06
     4b0:	be 01       	movw	r22, r28
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
     4b2:	6f 5f       	subi	r22, 0xFF	; 255
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
     4b4:	7f 4f       	sbci	r23, 0xFF	; 255
     4b6:	83 e5       	ldi	r24, 0x53	; 83
     4b8:	0e 94 9f 0a 	call	0x153e	; 0x153e <tal_pib_set>
     4bc:	be 01       	movw	r22, r28
     4be:	6d 5f       	subi	r22, 0xFD	; 253

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	80 e5       	ldi	r24, 0x50	; 80
     4c4:	0e 94 9f 0a 	call	0x153e	; 0x153e <tal_pib_set>
     4c8:	be 01       	movw	r22, r28
     4ca:	6b 5f       	subi	r22, 0xFB	; 251

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
     4cc:	7f 4f       	sbci	r23, 0xFF	; 255
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0e 94 9f 0a 	call	0x153e	; 0x153e <tal_pib_set>
     4d4:	be 01       	movw	r22, r28
     4d6:	6a 5f       	subi	r22, 0xFA	; 250
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
     4d8:	7f 4f       	sbci	r23, 0xFF	; 255
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	0e 94 9f 0a 	call	0x153e	; 0x153e <tal_pib_set>
     4e0:	62 e0       	ldi	r22, 0x02	; 2
     4e2:	80 e0       	ldi	r24, 0x00	; 0
    {
	    tal_ant_div_config(ANT_DIVERSITY_ENABLE,ANTENNA_DEFAULT);
    }
    else
    {
	    tal_ant_div_config(ANT_DIVERSITY_DISABLE,ANT_SELECT); 
     4e4:	0e 94 cb 0c 	call	0x1996	; 0x1996 <tal_ant_div_config>
     4e8:	c7 df       	rcall	.-114    	; 0x478 <init_data_reception>
    }
    #endif


	init_data_reception();
     4ea:	26 96       	adiw	r28, 0x06	; 6
     4ec:	0f b6       	in	r0, 0x3f	; 63

}
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <board_init>:
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     4fc:	8d b1       	in	r24, 0x0d	; 13
     4fe:	8e 7f       	andi	r24, 0xFE	; 254
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     500:	9e b1       	in	r25, 0x0e	; 14
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     502:	5e 9a       	sbi	0x0b, 6	; 11
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     504:	56 9a       	sbi	0x0a, 6	; 10
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     506:	a2 9a       	sbi	0x14, 2	; 20
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     508:	9a 9a       	sbi	0x13, 2	; 19
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     50a:	95 60       	ori	r25, 0x05	; 5
     50c:	9e b9       	out	0x0e, r25	; 14
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     50e:	84 60       	ori	r24, 0x04	; 4
     510:	8d b9       	out	0x0d, r24	; 13
     512:	08 95       	ret

00000514 <modules_init>:

/**
 * \brief Initializes the modules added by the Project Wizard
 */
void modules_init(void)
{
     514:	08 95       	ret

00000516 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	1f 92       	push	r1
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
     526:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     52a:	8f b7       	in	r24, 0x3f	; 63
     52c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     52e:	f8 94       	cli
	return flags;
     530:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     532:	5f 93       	push	r21
     534:	50 e8       	ldi	r21, 0x80	; 128
     536:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     540:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     542:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     544:	0f 90       	pop	r0
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	1f 92       	push	r1
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     556:	9f b7       	in	r25, 0x3f	; 63
     558:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     55a:	f8 94       	cli
	return flags;
     55c:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	40 f4       	brcc	.+16     	; 0x572 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     562:	e8 2f       	mov	r30, r24
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	ec 59       	subi	r30, 0x9C	; 156
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	60 95       	com	r22
     56c:	80 81       	ld	r24, Z
     56e:	68 23       	and	r22, r24
     570:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     572:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	1f 92       	push	r1
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     586:	9f b7       	in	r25, 0x3f	; 63
     588:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     58a:	f8 94       	cli
	return flags;
     58c:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	38 f4       	brcc	.+14     	; 0x5a0 <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     592:	e8 2f       	mov	r30, r24
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ec 59       	subi	r30, 0x9C	; 156
     598:	ff 4f       	sbci	r31, 0xFF	; 255
     59a:	80 81       	ld	r24, Z
     59c:	68 2b       	or	r22, r24
     59e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5a0:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     5a2:	0f 90       	pop	r0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <hw_expiry_cb>:
uint32_t sw_timer_next_timer_expiry_duration(void)
{
	return ((NO_TIMER ==
	       running_timer_queue_head) ? false : (sw_timer_get_residual_time(
	       running_timer_queue_head)));
}
     5aa:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <running_timers>
     5ae:	88 23       	and	r24, r24
     5b0:	19 f0       	breq	.+6      	; 0x5b8 <hw_expiry_cb+0xe>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 c2 52 	sts	0x52C2, r24	; 0x8052c2 <timer_trigger>
     5b8:	08 95       	ret

000005ba <hw_overflow_cb>:
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	1f 92       	push	r1
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	80 91 8e 52 	lds	r24, 0x528E	; 0x80528e <sys_time>
     5ca:	90 91 8f 52 	lds	r25, 0x528F	; 0x80528f <sys_time+0x1>
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	90 93 8f 52 	sts	0x528F, r25	; 0x80528f <sys_time+0x1>
     5d4:	80 93 8e 52 	sts	0x528E, r24	; 0x80528e <sys_time>
     5d8:	8f b7       	in	r24, 0x3f	; 63
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	f8 94       	cli
     5de:	19 81       	ldd	r17, Y+1	; 0x01
     5e0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <running_timer_queue_head>
     5e4:	8f 3f       	cpi	r24, 0xFF	; 255
     5e6:	e9 f1       	breq	.+122    	; 0x662 <hw_overflow_cb+0xa8>
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	fc 01       	movw	r30, r24
     5ec:	ee 0f       	add	r30, r30
     5ee:	ff 1f       	adc	r31, r31
     5f0:	9c 01       	movw	r18, r24
     5f2:	22 0f       	add	r18, r18
     5f4:	33 1f       	adc	r19, r19
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	e2 0f       	add	r30, r18
     600:	f3 1f       	adc	r31, r19
     602:	e0 57       	subi	r30, 0x70	; 112
     604:	fd 4a       	sbci	r31, 0xAD	; 173
     606:	21 85       	ldd	r18, Z+9	; 0x09
     608:	21 11       	cpse	r18, r1
     60a:	2b c0       	rjmp	.+86     	; 0x662 <hw_overflow_cb+0xa8>
     60c:	fc 01       	movw	r30, r24
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	e8 0f       	add	r30, r24
     620:	f9 1f       	adc	r31, r25
     622:	e0 57       	subi	r30, 0x70	; 112
     624:	fd 4a       	sbci	r31, 0xAD	; 173
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	a2 81       	ldd	r26, Z+2	; 0x02
     62c:	b3 81       	ldd	r27, Z+3	; 0x03
     62e:	20 91 8e 52 	lds	r18, 0x528E	; 0x80528e <sys_time>
     632:	30 91 8f 52 	lds	r19, 0x528F	; 0x80528f <sys_time+0x1>
     636:	2a 17       	cp	r18, r26
     638:	3b 07       	cpc	r19, r27
     63a:	99 f4       	brne	.+38     	; 0x662 <hw_overflow_cb+0xa8>
     63c:	ff dd       	rcall	.-1026   	; 0x23c <common_tc_delay>
     63e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <running_timer_queue_head>
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	fc 01       	movw	r30, r24
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	e8 0f       	add	r30, r24
     658:	f9 1f       	adc	r31, r25
     65a:	e0 57       	subi	r30, 0x70	; 112
     65c:	fd 4a       	sbci	r31, 0xAD	; 173
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	81 87       	std	Z+9, r24	; 0x09
     662:	1f bf       	out	0x3f, r17	; 63
     664:	0f 90       	pop	r0
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	08 95       	ret

0000066e <load_hw_timer>:
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	c8 2f       	mov	r28, r24
     678:	8f 3f       	cpi	r24, 0xFF	; 255
     67a:	09 f4       	brne	.+2      	; 0x67e <load_hw_timer+0x10>
     67c:	60 c0       	rjmp	.+192    	; 0x73e <load_hw_timer+0xd0>
     67e:	00 91 8e 52 	lds	r16, 0x528E	; 0x80528e <sys_time>
     682:	10 91 8f 52 	lds	r17, 0x528F	; 0x80528f <sys_time+0x1>
     686:	97 dd       	rcall	.-1234   	; 0x1b6 <common_tc_read_count>
     688:	40 91 8e 52 	lds	r20, 0x528E	; 0x80528e <sys_time>
     68c:	50 91 8f 52 	lds	r21, 0x528F	; 0x80528f <sys_time+0x1>
     690:	04 17       	cp	r16, r20
     692:	15 07       	cpc	r17, r21
     694:	a1 f7       	brne	.-24     	; 0x67e <load_hw_timer+0x10>
     696:	d0 e0       	ldi	r29, 0x00	; 0
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	fe 01       	movw	r30, r28
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	9e 01       	movw	r18, r28
     6a4:	22 0f       	add	r18, r18
     6a6:	33 1f       	adc	r19, r19
     6a8:	22 0f       	add	r18, r18
     6aa:	33 1f       	adc	r19, r19
     6ac:	22 0f       	add	r18, r18
     6ae:	33 1f       	adc	r19, r19
     6b0:	e2 0f       	add	r30, r18
     6b2:	f3 1f       	adc	r31, r19
     6b4:	e0 57       	subi	r30, 0x70	; 112
     6b6:	fd 4a       	sbci	r31, 0xAD	; 173
     6b8:	ba 01       	movw	r22, r20
     6ba:	55 27       	eor	r21, r21
     6bc:	44 27       	eor	r20, r20
     6be:	a0 e0       	ldi	r26, 0x00	; 0
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	48 2b       	or	r20, r24
     6c4:	59 2b       	or	r21, r25
     6c6:	6a 2b       	or	r22, r26
     6c8:	7b 2b       	or	r23, r27
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	a2 81       	ldd	r26, Z+2	; 0x02
     6d0:	b3 81       	ldd	r27, Z+3	; 0x03
     6d2:	84 1b       	sub	r24, r20
     6d4:	95 0b       	sbc	r25, r21
     6d6:	a6 0b       	sbc	r26, r22
     6d8:	b7 0b       	sbc	r27, r23
     6da:	8f 3f       	cpi	r24, 0xFF	; 255
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	92 07       	cpc	r25, r18
     6e0:	a2 07       	cpc	r26, r18
     6e2:	2f e7       	ldi	r18, 0x7F	; 127
     6e4:	b2 07       	cpc	r27, r18
     6e6:	38 f5       	brcc	.+78     	; 0x736 <load_hw_timer+0xc8>
     6e8:	9e 01       	movw	r18, r28
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	22 0f       	add	r18, r18
     6f0:	33 1f       	adc	r19, r19
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	fe 01       	movw	r30, r28
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e2 0f       	add	r30, r18
     6fe:	f3 1f       	adc	r31, r19
     700:	e0 57       	subi	r30, 0x70	; 112
     702:	fd 4a       	sbci	r31, 0xAD	; 173
     704:	21 85       	ldd	r18, Z+9	; 0x09
     706:	21 11       	cpse	r18, r1
     708:	1b c0       	rjmp	.+54     	; 0x740 <load_hw_timer+0xd2>
     70a:	00 97       	sbiw	r24, 0x00	; 0
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	a2 07       	cpc	r26, r18
     710:	b1 05       	cpc	r27, r1
     712:	b0 f4       	brcc	.+44     	; 0x740 <load_hw_timer+0xd2>
     714:	93 dd       	rcall	.-1242   	; 0x23c <common_tc_delay>
     716:	ce 01       	movw	r24, r28
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	cc 0f       	add	r28, r28
     71e:	dd 1f       	adc	r29, r29
     720:	cc 0f       	add	r28, r28
     722:	dd 1f       	adc	r29, r29
     724:	cc 0f       	add	r28, r28
     726:	dd 1f       	adc	r29, r29
     728:	c8 0f       	add	r28, r24
     72a:	d9 1f       	adc	r29, r25
     72c:	c0 57       	subi	r28, 0x70	; 112
     72e:	dd 4a       	sbci	r29, 0xAD	; 173
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	89 87       	std	Y+9, r24	; 0x09
     734:	05 c0       	rjmp	.+10     	; 0x740 <load_hw_timer+0xd2>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 c2 52 	sts	0x52C2, r24	; 0x8052c2 <timer_trigger>
     73c:	01 c0       	rjmp	.+2      	; 0x740 <load_hw_timer+0xd2>
     73e:	63 dd       	rcall	.-1338   	; 0x206 <common_tc_compare_stop>
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <internal_timer_handler>:
     74a:	80 91 c2 52 	lds	r24, 0x52C2	; 0x8052c2 <timer_trigger>
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <internal_timer_handler+0xa>
     752:	57 c0       	rjmp	.+174    	; 0x802 <internal_timer_handler+0xb8>
     754:	10 92 c2 52 	sts	0x52C2, r1	; 0x8052c2 <timer_trigger>
     758:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <running_timers>
     75c:	88 23       	and	r24, r24
     75e:	09 f4       	brne	.+2      	; 0x762 <internal_timer_handler+0x18>
     760:	50 c0       	rjmp	.+160    	; 0x802 <internal_timer_handler+0xb8>
     762:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <expired_timer_queue_head>
     766:	8f 3f       	cpi	r24, 0xFF	; 255
     768:	59 f4       	brne	.+22     	; 0x780 <internal_timer_handler+0x36>
     76a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <expired_timer_queue_tail>
     76e:	8f 3f       	cpi	r24, 0xFF	; 255
     770:	39 f4       	brne	.+14     	; 0x780 <internal_timer_handler+0x36>
     772:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <running_timer_queue_head>
     776:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <expired_timer_queue_tail>
     77a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <expired_timer_queue_head>
     77e:	15 c0       	rjmp	.+42     	; 0x7aa <internal_timer_handler+0x60>
     780:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <running_timer_queue_head>
     784:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <expired_timer_queue_tail>
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	fc 01       	movw	r30, r24
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	e8 0f       	add	r30, r24
     79e:	f9 1f       	adc	r31, r25
     7a0:	e0 57       	subi	r30, 0x70	; 112
     7a2:	fd 4a       	sbci	r31, 0xAD	; 173
     7a4:	20 87       	std	Z+8, r18	; 0x08
     7a6:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <expired_timer_queue_tail>
     7aa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <running_timer_queue_head>
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	fc 01       	movw	r30, r24
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	e8 0f       	add	r30, r24
     7c4:	f9 1f       	adc	r31, r25
     7c6:	e0 57       	subi	r30, 0x70	; 112
     7c8:	fd 4a       	sbci	r31, 0xAD	; 173
     7ca:	80 85       	ldd	r24, Z+8	; 0x08
     7cc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <running_timer_queue_head>
     7d0:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <expired_timer_queue_tail>
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	f9 01       	movw	r30, r18
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	22 0f       	add	r18, r18
     7de:	33 1f       	adc	r19, r19
     7e0:	22 0f       	add	r18, r18
     7e2:	33 1f       	adc	r19, r19
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
     7e8:	e2 0f       	add	r30, r18
     7ea:	f3 1f       	adc	r31, r19
     7ec:	e0 57       	subi	r30, 0x70	; 112
     7ee:	fd 4a       	sbci	r31, 0xAD	; 173
     7f0:	9f ef       	ldi	r25, 0xFF	; 255
     7f2:	90 87       	std	Z+8, r25	; 0x08
     7f4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <running_timers>
     7f8:	91 50       	subi	r25, 0x01	; 1
     7fa:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <running_timers>
     7fe:	91 11       	cpse	r25, r1
     800:	36 cf       	rjmp	.-404    	; 0x66e <load_hw_timer>
     802:	08 95       	ret

00000804 <sw_timer_init>:
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
     804:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <running_timers>
	timer_trigger = false;
     808:	10 92 c2 52 	sts	0x52C2, r1	; 0x8052c2 <timer_trigger>
	sys_time = 0;
     80c:	10 92 8f 52 	sts	0x528F, r1	; 0x80528f <sys_time+0x1>
     810:	10 92 8e 52 	sts	0x528E, r1	; 0x80528e <sys_time>

	running_timer_queue_head = NO_TIMER;
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <running_timer_queue_head>
	expired_timer_queue_head = NO_TIMER;
     81a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <expired_timer_queue_head>
	expired_timer_queue_tail = NO_TIMER;
     81e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <expired_timer_queue_tail>
     822:	e0 e9       	ldi	r30, 0x90	; 144
     824:	f2 e5       	ldi	r31, 0x52	; 82
     826:	22 ec       	ldi	r18, 0xC2	; 194
     828:	32 e5       	ldi	r19, 0x52	; 82

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
		timer_array[index].next_timer_in_queue = NO_TIMER;
     82a:	80 87       	std	Z+8, r24	; 0x08
		timer_array[index].timer_cb = NULL;
     82c:	15 82       	std	Z+5, r1	; 0x05
     82e:	14 82       	std	Z+4, r1	; 0x04
     830:	3a 96       	adiw	r30, 0x0a	; 10

	running_timer_queue_head = NO_TIMER;
	expired_timer_queue_head = NO_TIMER;
	expired_timer_queue_tail = NO_TIMER;

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
     832:	e2 17       	cp	r30, r18
     834:	f3 07       	cpc	r31, r19
     836:	c9 f7       	brne	.-14     	; 0x82a <sw_timer_init+0x26>
		timer_array[index].next_timer_in_queue = NO_TIMER;
		timer_array[index].timer_cb = NULL;
	}

	alloc_timer_id = 0;
     838:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <alloc_timer_id>
	set_common_tc_overflow_callback(hw_overflow_cb);
     83c:	8d ed       	ldi	r24, 0xDD	; 221
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	bb dd       	rcall	.-1162   	; 0x3b8 <set_common_tc_overflow_callback>
	set_common_tc_expiry_callback(hw_expiry_cb);
     842:	85 ed       	ldi	r24, 0xD5	; 213
     844:	92 e0       	ldi	r25, 0x02	; 2
	common_tc_init();
     846:	bd dd       	rcall	.-1158   	; 0x3c2 <set_common_tc_expiry_callback>
     848:	6e cd       	rjmp	.-1316   	; 0x326 <common_tc_init>
     84a:	08 95       	ret

0000084c <sw_timer_service>:
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	1f 92       	push	r1
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     85c:	8f b7       	in	r24, 0x3f	; 63
     85e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     860:	f8 94       	cli
	return flags;
     862:	1a 81       	ldd	r17, Y+2	; 0x02
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
     864:	72 df       	rcall	.-284    	; 0x74a <internal_timer_handler>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     866:	1f bf       	out	0x3f, r17	; 63
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
     868:	1f ef       	ldi	r17, 0xFF	; 255
     86a:	01 2f       	mov	r16, r17
     86c:	37 c0       	rjmp	.+110    	; 0x8dc <sw_timer_service+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     86e:	8f b7       	in	r24, 0x3f	; 63
     870:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     872:	f8 94       	cli
	return flags;
     874:	29 81       	ldd	r18, Y+1	; 0x01
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
     876:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <expired_timer_queue_head>
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	dc 01       	movw	r26, r24
     87e:	aa 0f       	add	r26, r26
     880:	bb 1f       	adc	r27, r27
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	a8 0f       	add	r26, r24
     890:	b9 1f       	adc	r27, r25
     892:	a0 57       	subi	r26, 0x70	; 112
     894:	bd 4a       	sbci	r27, 0xAD	; 173
     896:	18 96       	adiw	r26, 0x08	; 8
     898:	9c 91       	ld	r25, X
     89a:	18 97       	sbiw	r26, 0x08	; 8
					next_timer_in_queue;

			/* Callback is stored */
			callback
				= (timer_expiry_cb_t)timer_array[
     89c:	14 96       	adiw	r26, 0x04	; 4
     89e:	ed 91       	ld	r30, X+
     8a0:	fc 91       	ld	r31, X
     8a2:	15 97       	sbiw	r26, 0x05	; 5
				expired_timer_queue_head
					].timer_cb;

			/* Callback parameter is stored */
			callback_param
				= timer_array[expired_timer_queue_head].param_cb;
     8a4:	16 96       	adiw	r26, 0x06	; 6
     8a6:	4d 91       	ld	r20, X+
     8a8:	5c 91       	ld	r21, X
     8aa:	17 97       	sbiw	r26, 0x07	; 7
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
     8ac:	18 96       	adiw	r26, 0x08	; 8
     8ae:	1c 93       	st	X, r17
     8b0:	18 97       	sbiw	r26, 0x08	; 8
			timer_array[expired_timer_queue_head].timer_cb = NULL;
     8b2:	15 96       	adiw	r26, 0x05	; 5
     8b4:	1c 92       	st	X, r1
     8b6:	1e 92       	st	-X, r1
     8b8:	14 97       	sbiw	r26, 0x04	; 4
			timer_array[expired_timer_queue_head].param_cb = NULL;
     8ba:	17 96       	adiw	r26, 0x07	; 7
     8bc:	1c 92       	st	X, r1
     8be:	1e 92       	st	-X, r1
     8c0:	16 97       	sbiw	r26, 0x06	; 6
			timer_array[expired_timer_queue_head].loaded = false;
     8c2:	19 96       	adiw	r26, 0x09	; 9
     8c4:	1c 92       	st	X, r1
			/*
			 * The expired timer queue head is updated with the next
			 * timer in the
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;
     8c6:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <expired_timer_queue_head>

			if (NO_TIMER == expired_timer_queue_head) {
     8ca:	9f 3f       	cpi	r25, 0xFF	; 255
     8cc:	11 f4       	brne	.+4      	; 0x8d2 <sw_timer_service+0x86>
				expired_timer_queue_tail = NO_TIMER;
     8ce:	00 93 12 02 	sts	0x0212, r16	; 0x800212 <expired_timer_queue_tail>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8d2:	2f bf       	out	0x3f, r18	; 63
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
     8d4:	30 97       	sbiw	r30, 0x00	; 0
     8d6:	11 f0       	breq	.+4      	; 0x8dc <sw_timer_service+0x90>
				/* Callback function is called */
				callback(callback_param);
     8d8:	ca 01       	movw	r24, r20
     8da:	19 95       	eicall
		timer_expiry_cb_t callback;
		void *callback_param;
		uint8_t next_expired_timer;

		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
     8dc:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <expired_timer_queue_head>
     8e0:	8f 3f       	cpi	r24, 0xFF	; 255
     8e2:	29 f6       	brne	.-118    	; 0x86e <sw_timer_service+0x22>
				callback(callback_param);
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <pal_init>:
}

bool pal_is_timer_running(uint8_t timer_id)
{
	return sw_timer_is_running(timer_id);
}
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	08 95       	ret

000008f6 <pal_task>:
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
	sw_timer_service();
     8f6:	aa cf       	rjmp	.-172    	; 0x84c <sw_timer_service>
     8f8:	08 95       	ret

000008fa <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
     8fe:	86 e1       	ldi	r24, 0x16	; 22
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	b0 d0       	rcall	.+352    	; 0xa64 <qmm_queue_init>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     904:	cb e1       	ldi	r28, 0x1B	; 27
     906:	d2 e0       	ldi	r29, 0x02	; 2
     908:	87 e2       	ldi	r24, 0x27	; 39
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	99 83       	std	Y+1, r25	; 0x01
     90e:	88 83       	st	Y, r24

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     910:	be 01       	movw	r22, r28
     912:	86 e1       	ldi	r24, 0x16	; 22
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	ad d0       	rcall	.+346    	; 0xa72 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     918:	82 eb       	ldi	r24, 0xB2	; 178
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	9d 83       	std	Y+5, r25	; 0x05
     91e:	8c 83       	std	Y+4, r24	; 0x04

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     920:	6f e1       	ldi	r22, 0x1F	; 31
     922:	72 e0       	ldi	r23, 0x02	; 2
     924:	86 e1       	ldi	r24, 0x16	; 22
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	a4 d0       	rcall	.+328    	; 0xa72 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     92a:	8d e3       	ldi	r24, 0x3D	; 61
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	99 87       	std	Y+9, r25	; 0x09
     930:	88 87       	std	Y+8, r24	; 0x08

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     932:	63 e2       	ldi	r22, 0x23	; 35
     934:	72 e0       	ldi	r23, 0x02	; 2
     936:	86 e1       	ldi	r24, 0x16	; 22
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	9b d0       	rcall	.+310    	; 0xa72 <qmm_queue_append>
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <bmm_buffer_alloc>:
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	86 e1       	ldi	r24, 0x16	; 22
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	b8 c0       	rjmp	.+368    	; 0xabc <qmm_queue_remove>

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
     94c:	08 95       	ret

0000094e <bmm_buffer_free>:
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
		if (NULL == pbuffer) {
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	21 f0       	breq	.+8      	; 0x95a <bmm_buffer_free+0xc>
     952:	bc 01       	movw	r22, r24
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
     954:	86 e1       	ldi	r24, 0x16	; 22
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	8c c0       	rjmp	.+280    	; 0xa72 <qmm_queue_append>
     95a:	08 95       	ret

0000095c <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
     95c:	8f 92       	push	r8
     95e:	9f 92       	push	r9
     960:	af 92       	push	r10
     962:	bf 92       	push	r11
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	1f 92       	push	r1
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     97a:	2f b7       	in	r18, 0x3f	; 63
     97c:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     97e:	f8 94       	cli
	return flags;
     980:	89 80       	ldd	r8, Y+1	; 0x01
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
     982:	dc 01       	movw	r26, r24
     984:	14 96       	adiw	r26, 0x04	; 4
     986:	2c 91       	ld	r18, X
     988:	22 23       	and	r18, r18
     98a:	09 f4       	brne	.+2      	; 0x98e <queue_read_or_remove+0x32>
     98c:	56 c0       	rjmp	.+172    	; 0xa3a <queue_read_or_remove+0xde>
     98e:	7a 01       	movw	r14, r20
     990:	96 2e       	mov	r9, r22
     992:	5c 01       	movw	r10, r24
		buffer_current = q->head;
     994:	fc 01       	movw	r30, r24
     996:	00 81       	ld	r16, Z
     998:	11 81       	ldd	r17, Z+1	; 0x01
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
     99a:	45 2b       	or	r20, r21
     99c:	e1 f0       	breq	.+56     	; 0x9d6 <queue_read_or_remove+0x7a>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
     99e:	01 15       	cp	r16, r1
     9a0:	11 05       	cpc	r17, r1
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <queue_read_or_remove+0x4a>
     9a4:	4d c0       	rjmp	.+154    	; 0xa40 <queue_read_or_remove+0xe4>
     9a6:	68 01       	movw	r12, r16
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <queue_read_or_remove+0x50>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
     9aa:	89 01       	movw	r16, r18
		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
				match = search->criteria_func(
     9ac:	d7 01       	movw	r26, r14
     9ae:	12 96       	adiw	r26, 0x02	; 2
     9b0:	6d 91       	ld	r22, X+
     9b2:	7c 91       	ld	r23, X
     9b4:	13 97       	sbiw	r26, 0x03	; 3
     9b6:	ed 91       	ld	r30, X+
     9b8:	fc 91       	ld	r31, X
     9ba:	d8 01       	movw	r26, r16
     9bc:	8d 91       	ld	r24, X+
     9be:	9c 91       	ld	r25, X
     9c0:	19 95       	eicall
						(void *)buffer_current->body,
						search->handle);

				if (match) {
     9c2:	81 11       	cpse	r24, r1
     9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <queue_read_or_remove+0x7c>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
     9c6:	f8 01       	movw	r30, r16
     9c8:	22 81       	ldd	r18, Z+2	; 0x02
     9ca:	33 81       	ldd	r19, Z+3	; 0x03
     9cc:	68 01       	movw	r12, r16

		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
     9ce:	21 15       	cp	r18, r1
     9d0:	31 05       	cpc	r19, r1
     9d2:	59 f7       	brne	.-42     	; 0x9aa <queue_read_or_remove+0x4e>
     9d4:	35 c0       	rjmp	.+106    	; 0xa40 <queue_read_or_remove+0xe4>

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
		buffer_current = q->head;
		buffer_previous = q->head;
     9d6:	68 01       	movw	r12, r16
				buffer_current = buffer_current->next;
			}
		}

		/* Buffer matching with search criteria found */
		if (NULL != buffer_current) {
     9d8:	01 15       	cp	r16, r1
     9da:	11 05       	cpc	r17, r1
     9dc:	99 f1       	breq	.+102    	; 0xa44 <queue_read_or_remove+0xe8>
			/* Remove buffer from the queue */
			if (REMOVE_MODE == mode) {
     9de:	91 10       	cpse	r9, r1
     9e0:	31 c0       	rjmp	.+98     	; 0xa44 <queue_read_or_remove+0xe8>
				/* Update head if buffer removed is first node
				**/
				if (buffer_current == q->head) {
     9e2:	d5 01       	movw	r26, r10
     9e4:	8d 91       	ld	r24, X+
     9e6:	9c 91       	ld	r25, X
     9e8:	11 97       	sbiw	r26, 0x01	; 1
     9ea:	08 17       	cp	r16, r24
     9ec:	19 07       	cpc	r17, r25
     9ee:	31 f4       	brne	.+12     	; 0x9fc <queue_read_or_remove+0xa0>
					q->head = buffer_current->next;
     9f0:	f8 01       	movw	r30, r16
     9f2:	82 81       	ldd	r24, Z+2	; 0x02
     9f4:	93 81       	ldd	r25, Z+3	; 0x03
     9f6:	8d 93       	st	X+, r24
     9f8:	9c 93       	st	X, r25
     9fa:	08 c0       	rjmp	.+16     	; 0xa0c <queue_read_or_remove+0xb0>
				} else {
					/* Update the link by removing the
					 * buffer */
					buffer_previous->next
						= buffer_current->next;
     9fc:	d8 01       	movw	r26, r16
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	8d 91       	ld	r24, X+
     a02:	9c 91       	ld	r25, X
     a04:	13 97       	sbiw	r26, 0x03	; 3
     a06:	f6 01       	movw	r30, r12
     a08:	93 83       	std	Z+3, r25	; 0x03
     a0a:	82 83       	std	Z+2, r24	; 0x02
				}

				/* Update tail if buffer removed is last node */
				if (buffer_current == q->tail) {
     a0c:	d5 01       	movw	r26, r10
     a0e:	12 96       	adiw	r26, 0x02	; 2
     a10:	8d 91       	ld	r24, X+
     a12:	9c 91       	ld	r25, X
     a14:	13 97       	sbiw	r26, 0x03	; 3
     a16:	08 17       	cp	r16, r24
     a18:	19 07       	cpc	r17, r25
     a1a:	21 f4       	brne	.+8      	; 0xa24 <queue_read_or_remove+0xc8>
					q->tail = buffer_previous;
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	dc 92       	st	X, r13
     a20:	ce 92       	st	-X, r12
     a22:	12 97       	sbiw	r26, 0x02	; 2
				}

				/* Update size */
				q->size--;
     a24:	f5 01       	movw	r30, r10
     a26:	84 81       	ldd	r24, Z+4	; 0x04
     a28:	81 50       	subi	r24, 0x01	; 1
     a2a:	84 83       	std	Z+4, r24	; 0x04

				if (NULL == q->head) {
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	89 2b       	or	r24, r25
     a32:	41 f4       	brne	.+16     	; 0xa44 <queue_read_or_remove+0xe8>
					q->tail = NULL;
     a34:	13 82       	std	Z+3, r1	; 0x03
     a36:	12 82       	std	Z+2, r1	; 0x02
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <queue_read_or_remove+0xe8>
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
	buffer_t *buffer_current = NULL;
     a3a:	00 e0       	ldi	r16, 0x00	; 0
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <queue_read_or_remove+0xe8>
     a40:	00 e0       	ldi	r16, 0x00	; 0
     a42:	10 e0       	ldi	r17, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a44:	8f be       	out	0x3f, r8	; 63
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
     a46:	c8 01       	movw	r24, r16
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	af 90       	pop	r10
     a5e:	9f 90       	pop	r9
     a60:	8f 90       	pop	r8
     a62:	08 95       	ret

00000a64 <qmm_queue_init>:
#ifdef ENABLE_QUEUE_CAPACITY
void qmm_queue_init(queue_t *q, uint8_t capacity)
#else
void qmm_queue_init(queue_t *q)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
     a64:	fc 01       	movw	r30, r24
	q->head = NULL;
     a66:	11 82       	std	Z+1, r1	; 0x01
     a68:	10 82       	st	Z, r1
	q->tail = NULL;
     a6a:	13 82       	std	Z+3, r1	; 0x03
     a6c:	12 82       	std	Z+2, r1	; 0x02
	q->size = 0;
     a6e:	14 82       	std	Z+4, r1	; 0x04
     a70:	08 95       	ret

00000a72 <qmm_queue_append>:
#ifdef ENABLE_QUEUE_CAPACITY
retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
#else
void qmm_queue_append(queue_t *q, buffer_t *buf)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	1f 92       	push	r1
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a7e:	8f b7       	in	r24, 0x3f	; 63
     a80:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a82:	f8 94       	cli
	return flags;
     a84:	99 81       	ldd	r25, Y+1	; 0x01
		status = QUEUE_FULL;
	} else
#endif  /* ENABLE_QUEUE_CAPACITY */
	{
		/* Check whether queue is empty */
		if (q->size == 0) {
     a86:	84 81       	ldd	r24, Z+4	; 0x04
     a88:	81 11       	cpse	r24, r1
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <qmm_queue_append+0x20>
			/* Add the buffer at the head */
			q->head = buf;
     a8c:	71 83       	std	Z+1, r23	; 0x01
     a8e:	60 83       	st	Z, r22
     a90:	06 c0       	rjmp	.+12     	; 0xa9e <qmm_queue_append+0x2c>
		} else {
			/* Add the buffer at the end */
			q->tail->next = buf;
     a92:	a2 81       	ldd	r26, Z+2	; 0x02
     a94:	b3 81       	ldd	r27, Z+3	; 0x03
     a96:	13 96       	adiw	r26, 0x03	; 3
     a98:	7c 93       	st	X, r23
     a9a:	6e 93       	st	-X, r22
     a9c:	12 97       	sbiw	r26, 0x02	; 2
		}

		/* Update the list */
		q->tail = buf;
     a9e:	73 83       	std	Z+3, r23	; 0x03
     aa0:	62 83       	std	Z+2, r22	; 0x02

		/* Terminate the list */
		buf->next = NULL;
     aa2:	db 01       	movw	r26, r22
     aa4:	13 96       	adiw	r26, 0x03	; 3
     aa6:	1c 92       	st	X, r1
     aa8:	1e 92       	st	-X, r1
     aaa:	12 97       	sbiw	r26, 0x02	; 2

		/* Update size */
		q->size++;
     aac:	84 81       	ldd	r24, Z+4	; 0x04
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ab2:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_REGION();

#ifdef ENABLE_QUEUE_CAPACITY
	return (status);
#endif
} /* qmm_queue_append */
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
     abc:	ab 01       	movw	r20, r22
	return (queue_read_or_remove(q, REMOVE_MODE, search));
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	4d cf       	rjmp	.-358    	; 0x95c <queue_read_or_remove>
}
     ac2:	08 95       	ret

00000ac4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     ac4:	04 c0       	rjmp	.+8      	; 0xace <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     ac6:	61 50       	subi	r22, 0x01	; 1
     ac8:	71 09       	sbc	r23, r1
     aca:	81 09       	sbc	r24, r1
     acc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     ace:	61 15       	cp	r22, r1
     ad0:	71 05       	cpc	r23, r1
     ad2:	81 05       	cpc	r24, r1
     ad4:	91 05       	cpc	r25, r1
     ad6:	b9 f7       	brne	.-18     	; 0xac6 <__portable_avr_delay_cycles+0x2>
     ad8:	08 95       	ret

00000ada <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine_rfr2
 */
static void switch_pll_on(void)
{
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
     ae0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
     ae4:	8f 71       	andi	r24, 0x1F	; 31
     ae6:	88 30       	cpi	r24, 0x08	; 8
     ae8:	a1 f4       	brne	.+40     	; 0xb12 <switch_pll_on+0x38>
				"Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	IRQ_STATUS = _BV(PLL_LOCK); /* clear PLL lock bit */
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	/* Switch PLL on */
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     af0:	89 e0       	ldi	r24, 0x09	; 9
     af2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     af6:	c3 e0       	ldi	r28, 0x03	; 3

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t)trx_reg_read(RG_IRQ_STATUS);
     af8:	0f e4       	ldi	r16, 0x4F	; 79
     afa:	11 e0       	ldi	r17, 0x01	; 1
     afc:	f8 01       	movw	r30, r16
     afe:	80 81       	ld	r24, Z

		if (irq_status & TRX_IRQ_PLL_LOCK) {
     b00:	80 fd       	sbrc	r24, 0
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <switch_pll_on+0x38>
			return; /* PLL is locked now */
		}

		/* Wait a time interval of typical value for timer TR4. */
		pal_timer_delay(TRX_OFF_TO_PLL_ON_TIME_US);
     b04:	63 e9       	ldi	r22, 0x93	; 147
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	db df       	rcall	.-74     	; 0xac4 <__portable_avr_delay_cycles>
     b0e:	c1 50       	subi	r28, 0x01	; 1

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
     b10:	a9 f7       	brne	.-22     	; 0xafc <switch_pll_on+0x22>

#if (_DEBUG_ > 0)
	Assert("PLL switch failed" == 0);
#endif
}
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	08 95       	ret

00000b1a <set_trx_state>:
 * \param trx_cmd needs to be one of the trx commands
 *
 * \return current trx state
 */
tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	1f 92       	push	r1
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	18 2f       	mov	r17, r24
	if (tal_trx_status == TRX_SLEEP) {
     b28:	80 91 ea 52 	lds	r24, 0x52EA	; 0x8052ea <tal_trx_status>
     b2c:	8f 30       	cpi	r24, 0x0F	; 15
     b2e:	51 f5       	brne	.+84     	; 0xb84 <set_trx_state+0x6a>
		 * Once the TRX is awake, the original state of the global
		 * interrupts
		 * will be restored.
		 */
		/* Reset wake-up interrupt flag. */
		if (CMD_SLEEP == trx_cmd) {
     b30:	1f 30       	cpi	r17, 0x0F	; 15
     b32:	09 f4       	brne	.+2      	; 0xb36 <set_trx_state+0x1c>
     b34:	38 c1       	rjmp	.+624    	; 0xda6 <set_trx_state+0x28c>
			return TRX_SLEEP;
		}

		tal_awake_end_flag = false;
     b36:	10 92 ee 52 	sts	0x52EE, r1	; 0x8052ee <tal_awake_end_flag>
		/* Set callback function for the awake interrupt. */
		pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
     b3a:	82 ec       	ldi	r24, 0xC2	; 194
     b3c:	99 e0       	ldi	r25, 0x09	; 9
     b3e:	e1 d2       	rcall	.+1474   	; 0x1102 <pal_trx_irq_init_awake>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b40:	8f b7       	in	r24, 0x3f	; 63
     b42:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b44:	f8 94       	cli
	return flags;
     b46:	99 81       	ldd	r25, Y+1	; 0x01
		/* Save current state of global interrupts. */
		ENTER_CRITICAL_REGION();
		/* Force enabling of global interrupts. */
		ENABLE_GLOBAL_IRQ();
     b48:	78 94       	sei
		/* Leave trx sleep mode. */
		TRX_SLP_TR_LOW();
     b4a:	e9 e3       	ldi	r30, 0x39	; 57
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	80 81       	ld	r24, Z
     b50:	8d 7f       	andi	r24, 0xFD	; 253
     b52:	80 83       	st	Z, r24
		/* Poll wake-up interrupt flag until set within ISR. */
		while (!tal_awake_end_flag) {
     b54:	80 91 ee 52 	lds	r24, 0x52EE	; 0x8052ee <tal_awake_end_flag>
     b58:	88 23       	and	r24, r24
     b5a:	e1 f3       	breq	.-8      	; 0xb54 <set_trx_state+0x3a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b5c:	9f bf       	out	0x3f, r25	; 63
		}
		/* Restore original state of global interrupts. */
		LEAVE_CRITICAL_REGION();
		/* Clear existing interrupts */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
		/* Re-enable TRX_END interrupt */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
     b64:	88 e4       	ldi	r24, 0x48	; 72
     b66:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

#if (ANTENNA_DIVERSITY == 1)
		/* Enable antenna diversity. */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
     b6a:	ed e4       	ldi	r30, 0x4D	; 77
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	80 81       	ld	r24, Z
     b70:	84 60       	ori	r24, 0x04	; 4
     b72:	80 83       	st	Z, r24
#endif

		if ((trx_cmd == CMD_TRX_OFF) ||
     b74:	18 30       	cpi	r17, 0x08	; 8
     b76:	11 f0       	breq	.+4      	; 0xb7c <set_trx_state+0x62>
     b78:	13 30       	cpi	r17, 0x03	; 3
     b7a:	21 f4       	brne	.+8      	; 0xb84 <set_trx_state+0x6a>
				(trx_cmd == CMD_FORCE_TRX_OFF)) {
			tal_trx_status = TRX_OFF;
     b7c:	88 e0       	ldi	r24, 0x08	; 8
     b7e:	80 93 ea 52 	sts	0x52EA, r24	; 0x8052ea <tal_trx_status>
			return TRX_OFF;
     b82:	11 c1       	rjmp	.+546    	; 0xda6 <set_trx_state+0x28c>
		}
	}

	switch (trx_cmd) { /* requested state */
     b84:	81 2f       	mov	r24, r17
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	fc 01       	movw	r30, r24
     b8a:	33 97       	sbiw	r30, 0x03	; 3
     b8c:	e7 31       	cpi	r30, 0x17	; 23
     b8e:	f1 05       	cpc	r31, r1
     b90:	08 f0       	brcs	.+2      	; 0xb94 <set_trx_state+0x7a>
     b92:	5a c0       	rjmp	.+180    	; 0xc48 <set_trx_state+0x12e>
     b94:	88 27       	eor	r24, r24
     b96:	e6 56       	subi	r30, 0x66	; 102
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	8f 4f       	sbci	r24, 0xFF	; 255
     b9c:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__tablejump2__>
	case CMD_SLEEP:
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
#if (ANTENNA_DIVERSITY == 1)
		/* Disable antenna diversity: sets pulls */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
     ba6:	ed e4       	ldi	r30, 0x4D	; 77
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	80 81       	ld	r24, Z
     bac:	8b 7f       	andi	r24, 0xFB	; 251
     bae:	80 83       	st	Z, r24
			uint16_t rand_value;

			/*
			 * Init the SEED value of the CSMA backoff algorithm.
			 */
			rand_value = (uint16_t)rand();
     bb0:	0e 94 a9 12 	call	0x2552	; 0x2552 <rand>
			trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
     bb4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
			trx_bit_write(SR_CSMA_SEED_1,
     bb8:	ee e6       	ldi	r30, 0x6E	; 110
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	80 81       	ld	r24, Z
     bbe:	97 70       	andi	r25, 0x07	; 7
     bc0:	88 7f       	andi	r24, 0xF8	; 248
     bc2:	89 2b       	or	r24, r25
     bc4:	80 83       	st	Z, r24

		/*
		 * Clear existing interrupts to have clear interrupt flags
		 * during wake-up.
		 */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

		/*
		 * Enable Awake_end interrupt.
		 * This is used for save wake-up from sleep later.
		 */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_AWAKE_ONLY);
     bcc:	80 e8       	ldi	r24, 0x80	; 128
     bce:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

		PAL_WAIT_1_US();
     bd2:	62 e0       	ldi	r22, 0x02	; 2
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	74 df       	rcall	.-280    	; 0xac4 <__portable_avr_delay_cycles>
		TRX_SLP_TR_HIGH();
     bdc:	e9 e3       	ldi	r30, 0x39	; 57
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	80 81       	ld	r24, Z
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	80 83       	st	Z, r24
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
     be6:	6f e2       	ldi	r22, 0x2F	; 47
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	6a df       	rcall	.-300    	; 0xac4 <__portable_avr_delay_cycles>
		tal_trx_status = TRX_SLEEP;
     bf0:	8f e0       	ldi	r24, 0x0F	; 15
     bf2:	80 93 ea 52 	sts	0x52EA, r24	; 0x8052ea <tal_trx_status>
		return TRX_SLEEP; /* transceiver register cannot be read during
     bf6:	d7 c0       	rjmp	.+430    	; 0xda6 <set_trx_state+0x28c>
		                   * TRX_SLEEP */

	case CMD_TRX_OFF:
		switch (tal_trx_status) {
     bf8:	80 91 ea 52 	lds	r24, 0x52EA	; 0x8052ea <tal_trx_status>
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	21 f1       	breq	.+72     	; 0xc48 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
     c00:	88 e0       	ldi	r24, 0x08	; 8
     c02:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     c06:	62 e0       	ldi	r22, 0x02	; 2
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	5a df       	rcall	.-332    	; 0xac4 <__portable_avr_delay_cycles>
			break;
     c10:	1b c0       	rjmp	.+54     	; 0xc48 <set_trx_state+0x12e>
		}
		break;

	case CMD_FORCE_TRX_OFF:
		switch (tal_trx_status) {
     c12:	80 91 ea 52 	lds	r24, 0x52EA	; 0x8052ea <tal_trx_status>
     c16:	88 30       	cpi	r24, 0x08	; 8
     c18:	b9 f0       	breq	.+46     	; 0xc48 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     c20:	62 e0       	ldi	r22, 0x02	; 2
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	4d df       	rcall	.-358    	; 0xac4 <__portable_avr_delay_cycles>
			break;
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <set_trx_state+0x12e>
		}
		break;

	case CMD_PLL_ON:
		switch (tal_trx_status) {
     c2c:	80 91 ea 52 	lds	r24, 0x52EA	; 0x8052ea <tal_trx_status>
     c30:	88 30       	cpi	r24, 0x08	; 8
     c32:	49 f0       	breq	.+18     	; 0xc46 <set_trx_state+0x12c>
     c34:	18 f4       	brcc	.+6      	; 0xc3c <set_trx_state+0x122>
     c36:	86 30       	cpi	r24, 0x06	; 6
     c38:	39 f4       	brne	.+14     	; 0xc48 <set_trx_state+0x12e>
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <set_trx_state+0x134>
     c3c:	86 31       	cpi	r24, 0x16	; 22
     c3e:	39 f0       	breq	.+14     	; 0xc4e <set_trx_state+0x134>
     c40:	89 31       	cpi	r24, 0x19	; 25
     c42:	11 f4       	brne	.+4      	; 0xc48 <set_trx_state+0x12e>
		case PLL_ON:
			break;

		case TRX_OFF:
			switch_pll_on();
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <set_trx_state+0x134>
     c46:	49 df       	rcall	.-366    	; 0xada <switch_pll_on>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
     c48:	e1 e4       	ldi	r30, 0x41	; 65
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	a6 c0       	rjmp	.+332    	; 0xd9a <set_trx_state+0x280>
			break;

		case RX_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     c4e:	89 e0       	ldi	r24, 0x09	; 9
     c50:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	33 df       	rcall	.-410    	; 0xac4 <__portable_avr_delay_cycles>
			break;
     c5e:	f4 cf       	rjmp	.-24     	; 0xc48 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_FORCE_PLL_ON:
		switch (tal_trx_status) {
     c60:	80 91 ea 52 	lds	r24, 0x52EA	; 0x8052ea <tal_trx_status>
     c64:	88 30       	cpi	r24, 0x08	; 8
     c66:	19 f0       	breq	.+6      	; 0xc6e <set_trx_state+0x154>
     c68:	89 30       	cpi	r24, 0x09	; 9
     c6a:	71 f3       	breq	.-36     	; 0xc48 <set_trx_state+0x12e>
		case TRX_OFF:
			switch_pll_on();
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <set_trx_state+0x158>
     c6e:	35 df       	rcall	.-406    	; 0xada <switch_pll_on>
			break;
     c70:	eb cf       	rjmp	.-42     	; 0xc48 <set_trx_state+0x12e>

		case PLL_ON:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			break;
     c78:	e7 cf       	rjmp	.-50     	; 0xc48 <set_trx_state+0x12e>
		}
		break;

	case CMD_RX_ON:
		switch (tal_trx_status) {
     c7a:	80 91 ea 52 	lds	r24, 0x52EA	; 0x8052ea <tal_trx_status>
     c7e:	89 30       	cpi	r24, 0x09	; 9
     c80:	41 f0       	breq	.+16     	; 0xc92 <set_trx_state+0x178>
     c82:	18 f4       	brcc	.+6      	; 0xc8a <set_trx_state+0x170>
     c84:	88 30       	cpi	r24, 0x08	; 8
     c86:	71 f0       	breq	.+28     	; 0xca4 <set_trx_state+0x18a>
     c88:	df cf       	rjmp	.-66     	; 0xc48 <set_trx_state+0x12e>
     c8a:	86 31       	cpi	r24, 0x16	; 22
     c8c:	11 f0       	breq	.+4      	; 0xc92 <set_trx_state+0x178>
     c8e:	89 31       	cpi	r24, 0x19	; 25
			break;

		case PLL_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
     c90:	d9 f6       	brne	.-74     	; 0xc48 <set_trx_state+0x12e>
     c92:	86 e0       	ldi	r24, 0x06	; 6
			PAL_WAIT_1_US();
     c94:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     c98:	62 e0       	ldi	r22, 0x02	; 2
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
			break;

		case TRX_OFF:
			switch_pll_on();
     ca0:	11 df       	rcall	.-478    	; 0xac4 <__portable_avr_delay_cycles>
     ca2:	d2 cf       	rjmp	.-92     	; 0xc48 <set_trx_state+0x12e>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
     ca4:	1a df       	rcall	.-460    	; 0xada <switch_pll_on>
     ca6:	86 e0       	ldi	r24, 0x06	; 6
     ca8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     cac:	62 e0       	ldi	r22, 0x02	; 2
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	07 df       	rcall	.-498    	; 0xac4 <__portable_avr_delay_cycles>
			break;
     cb6:	c8 cf       	rjmp	.-112    	; 0xc48 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_RX_AACK_ON:
		switch (tal_trx_status) {
     cb8:	80 91 ea 52 	lds	r24, 0x52EA	; 0x8052ea <tal_trx_status>
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	91 f0       	breq	.+36     	; 0xce4 <set_trx_state+0x1ca>
     cc0:	18 f4       	brcc	.+6      	; 0xcc8 <set_trx_state+0x1ae>
     cc2:	86 30       	cpi	r24, 0x06	; 6
     cc4:	c9 f0       	breq	.+50     	; 0xcf8 <set_trx_state+0x1de>
     cc6:	c0 cf       	rjmp	.-128    	; 0xc48 <set_trx_state+0x12e>
     cc8:	89 30       	cpi	r24, 0x09	; 9
     cca:	19 f0       	breq	.+6      	; 0xcd2 <set_trx_state+0x1b8>
     ccc:	89 31       	cpi	r24, 0x19	; 25
		case RX_AACK_ON:
			break;

		case TX_ARET_ON:
		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     cce:	09 f0       	breq	.+2      	; 0xcd2 <set_trx_state+0x1b8>
     cd0:	bb cf       	rjmp	.-138    	; 0xc48 <set_trx_state+0x12e>
     cd2:	86 e1       	ldi	r24, 0x16	; 22
			PAL_WAIT_1_US();
     cd4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     cd8:	62 e0       	ldi	r22, 0x02	; 2
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
			break;
     cde:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
     ce0:	f1 de       	rcall	.-542    	; 0xac4 <__portable_avr_delay_cycles>
     ce2:	b2 cf       	rjmp	.-156    	; 0xc48 <set_trx_state+0x12e>
			                  * RX_AACK_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     ce4:	fa de       	rcall	.-524    	; 0xada <switch_pll_on>
     ce6:	86 e1       	ldi	r24, 0x16	; 22
     ce8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
			break;
     cf4:	e7 de       	rcall	.-562    	; 0xac4 <__portable_avr_delay_cycles>

		case RX_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     cf6:	a8 cf       	rjmp	.-176    	; 0xc48 <set_trx_state+0x12e>
     cf8:	89 e0       	ldi	r24, 0x09	; 9
     cfa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     cfe:	62 e0       	ldi	r22, 0x02	; 2
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	de de       	rcall	.-580    	; 0xac4 <__portable_avr_delay_cycles>
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
     d08:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
     d0c:	8f 71       	andi	r24, 0x1F	; 31
     d0e:	80 93 ea 52 	sts	0x52EA, r24	; 0x8052ea <tal_trx_status>
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
     d12:	89 30       	cpi	r24, 0x09	; 9
     d14:	09 f0       	breq	.+2      	; 0xd18 <set_trx_state+0x1fe>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     d16:	47 c0       	rjmp	.+142    	; 0xda6 <set_trx_state+0x28c>
     d18:	86 e1       	ldi	r24, 0x16	; 22
     d1a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     d1e:	62 e0       	ldi	r22, 0x02	; 2
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	ce de       	rcall	.-612    	; 0xac4 <__portable_avr_delay_cycles>
			break;
     d28:	8f cf       	rjmp	.-226    	; 0xc48 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_TX_ARET_ON:
		switch (tal_trx_status) {
     d2a:	80 91 ea 52 	lds	r24, 0x52EA	; 0x8052ea <tal_trx_status>
     d2e:	88 30       	cpi	r24, 0x08	; 8
     d30:	51 f1       	breq	.+84     	; 0xd86 <set_trx_state+0x26c>
     d32:	18 f4       	brcc	.+6      	; 0xd3a <set_trx_state+0x220>
     d34:	86 30       	cpi	r24, 0x06	; 6
     d36:	79 f0       	breq	.+30     	; 0xd56 <set_trx_state+0x23c>
     d38:	87 cf       	rjmp	.-242    	; 0xc48 <set_trx_state+0x12e>
     d3a:	89 30       	cpi	r24, 0x09	; 9
     d3c:	19 f0       	breq	.+6      	; 0xd44 <set_trx_state+0x22a>
     d3e:	86 31       	cpi	r24, 0x16	; 22
     d40:	51 f0       	breq	.+20     	; 0xd56 <set_trx_state+0x23c>
		case TX_ARET_ON:
			break;

		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     d42:	82 cf       	rjmp	.-252    	; 0xc48 <set_trx_state+0x12e>
     d44:	89 e1       	ldi	r24, 0x19	; 25
			PAL_WAIT_1_US();
     d46:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     d4a:	62 e0       	ldi	r22, 0x02	; 2
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
			break;
     d52:	b8 de       	rcall	.-656    	; 0xac4 <__portable_avr_delay_cycles>

		case RX_ON:
		case RX_AACK_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     d54:	79 cf       	rjmp	.-270    	; 0xc48 <set_trx_state+0x12e>
     d56:	89 e0       	ldi	r24, 0x09	; 9
     d58:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     d5c:	62 e0       	ldi	r22, 0x02	; 2
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	80 e0       	ldi	r24, 0x00	; 0
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	af de       	rcall	.-674    	; 0xac4 <__portable_avr_delay_cycles>
     d66:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
     d6a:	8f 71       	andi	r24, 0x1F	; 31
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
     d6c:	80 93 ea 52 	sts	0x52EA, r24	; 0x8052ea <tal_trx_status>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     d70:	89 30       	cpi	r24, 0x09	; 9
     d72:	c9 f4       	brne	.+50     	; 0xda6 <set_trx_state+0x28c>
			PAL_WAIT_1_US();
     d74:	89 e1       	ldi	r24, 0x19	; 25
     d76:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
     d7a:	62 e0       	ldi	r22, 0x02	; 2
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
			break;
     d80:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
     d82:	a0 de       	rcall	.-704    	; 0xac4 <__portable_avr_delay_cycles>
     d84:	61 cf       	rjmp	.-318    	; 0xc48 <set_trx_state+0x12e>
			                  * TX_ARET_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     d86:	a9 de       	rcall	.-686    	; 0xada <switch_pll_on>
     d88:	89 e1       	ldi	r24, 0x19	; 25
     d8a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
     d8e:	62 e0       	ldi	r22, 0x02	; 2
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	96 de       	rcall	.-724    	; 0xac4 <__portable_avr_delay_cycles>
			break;
     d98:	57 cf       	rjmp	.-338    	; 0xc48 <set_trx_state+0x12e>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 71       	andi	r24, 0x1F	; 31
     d9e:	80 93 ea 52 	sts	0x52EA, r24	; 0x8052ea <tal_trx_status>
				SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
     da2:	8f 31       	cpi	r24, 0x1F	; 31
     da4:	d1 f3       	breq	.-12     	; 0xd9a <set_trx_state+0x280>

	return tal_trx_status;
} /* set_trx_state() */
     da6:	0f 90       	pop	r0
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	08 95       	ret

00000db0 <tal_task>:
 * - Checks and allocates the receive buffer.
 * - Processes the TAL incoming frame queue.
 * - Implements the TAL state machine.
 */
void tal_task(void)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
	/* Check if the receiver needs to be switched on. */
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
     db4:	80 91 c3 52 	lds	r24, 0x52C3	; 0x8052c3 <tal_rx_on_required>
     db8:	88 23       	and	r24, r24
     dba:	19 f1       	breq	.+70     	; 0xe02 <tal_task+0x52>
     dbc:	80 91 ef 52 	lds	r24, 0x52EF	; 0x8052ef <tal_state>
     dc0:	81 11       	cpse	r24, r1
     dc2:	1f c0       	rjmp	.+62     	; 0xe02 <tal_task+0x52>
		/* Check if a receive buffer has not been available before. */
		if (tal_rx_buffer == NULL) {
     dc4:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tal_rx_buffer>
     dc8:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tal_rx_buffer+0x1>
     dcc:	89 2b       	or	r24, r25
     dce:	41 f4       	brne	.+16     	; 0xde0 <tal_task+0x30>
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
     dd0:	8b e8       	ldi	r24, 0x8B	; 139
     dd2:	b7 dd       	rcall	.-1170   	; 0x942 <bmm_buffer_alloc>
     dd4:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <tal_rx_buffer+0x1>
     dd8:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <tal_rx_buffer>
		}

		/* Check if buffer could be allocated */
		if (NULL != tal_rx_buffer) {
     ddc:	89 2b       	or	r24, r25
     dde:	89 f0       	breq	.+34     	; 0xe02 <tal_task+0x52>
			/*
			 * Note:
			 * This flag needs to be reset BEFORE the received is
			 * switched on.
			 */
			tal_rx_on_required = false;
     de0:	10 92 c3 52 	sts	0x52C3, r1	; 0x8052c3 <tal_rx_on_required>
			/*
			 * Release the protected buffer and set it again for
			 * further protection
			 * since the buffer is available now.
			 */
			trx_bit_write(SR_RX_SAFE_MODE,
     de4:	cc e4       	ldi	r28, 0x4C	; 76
     de6:	d1 e0       	ldi	r29, 0x01	; 1
     de8:	88 81       	ld	r24, Y
     dea:	8f 77       	andi	r24, 0x7F	; 127
     dec:	88 83       	st	Y, r24
			                                                *
			                                                *
			                                                *protection
			                                                * mode
			                                                **/
			pal_timer_delay(2); /* Allow pin change to get effective
     dee:	63 e0       	ldi	r22, 0x03	; 3
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	66 de       	rcall	.-820    	; 0xac4 <__portable_avr_delay_cycles>
			                    **/
			trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
     df8:	88 81       	ld	r24, Y
     dfa:	80 68       	ori	r24, 0x80	; 128
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
     dfc:	88 83       	st	Y, r24
     dfe:	86 e1       	ldi	r24, 0x16	; 22
     e00:	8c de       	rcall	.-744    	; 0xb1a <set_trx_state>

	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the queue of the TAL, the frame needs to be processed further.
	 */
	if (tal_incoming_frame_queue.size > 0) {
     e02:	80 91 c8 52 	lds	r24, 0x52C8	; 0x8052c8 <tal_incoming_frame_queue+0x4>
     e06:	88 23       	and	r24, r24
     e08:	41 f0       	breq	.+16     	; 0xe1a <tal_task+0x6a>
		buffer_t *rx_frame;

		/* Check if there are any pending data in the
		 * incoming_frame_queue. */
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	84 ec       	ldi	r24, 0xC4	; 196
     e10:	92 e5       	ldi	r25, 0x52	; 82
		if (NULL != rx_frame) {
     e12:	54 de       	rcall	.-856    	; 0xabc <qmm_queue_remove>
     e14:	00 97       	sbiw	r24, 0x00	; 0
			process_incoming_frame(rx_frame);
     e16:	09 f0       	breq	.+2      	; 0xe1a <tal_task+0x6a>
		}
	}

	/* Handle the TAL state machines */
	switch (tal_state) {
     e18:	24 d5       	rcall	.+2632   	; 0x1862 <process_incoming_frame>
     e1a:	80 91 ef 52 	lds	r24, 0x52EF	; 0x8052ef <tal_state>
     e1e:	82 30       	cpi	r24, 0x02	; 2
		/* Wait until state is changed to TAL_TX_DONE inside tx end ISR
		**/
		break;

	case TAL_TX_DONE:
		tx_done_handling(); /* see tal_tx.c */
     e20:	09 f4       	brne	.+2      	; 0xe24 <tal_task+0x74>
     e22:	7a d5       	rcall	.+2804   	; 0x1918 <tx_done_handling>
#endif /* (MAC_SCAN_ED_REQUEST_CONFIRM == 1) */
	default:
		Assert("tal_state is not handled" == 0);
		break;
	}
} /* tal_task() */
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     e2c:	61 50       	subi	r22, 0x01	; 1
     e2e:	71 09       	sbc	r23, r1
     e30:	81 09       	sbc	r24, r1
     e32:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     e34:	61 15       	cp	r22, r1
     e36:	71 05       	cpc	r23, r1
     e38:	81 05       	cpc	r24, r1
     e3a:	91 05       	cpc	r25, r1
     e3c:	b9 f7       	brne	.-18     	; 0xe2c <__portable_avr_delay_cycles+0x2>
     e3e:	08 95       	ret

00000e40 <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
	uint8_t cur_random_val = 0;

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
     e4a:	86 e0       	ldi	r24, 0x06	; 6
     e4c:	66 de       	rcall	.-820    	; 0xb1a <set_trx_state>
	} while (trx_state != RX_ON);
     e4e:	86 30       	cpi	r24, 0x06	; 6
     e50:	e1 f7       	brne	.-8      	; 0xe4a <tal_generate_rand_seed+0xa>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
     e52:	e5 e5       	ldi	r30, 0x55	; 85
     e54:	f1 e0       	ldi	r31, 0x01	; 1
     e56:	80 81       	ld	r24, Z
     e58:	8f 77       	andi	r24, 0x7F	; 127
     e5a:	80 83       	st	Z, r24

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
     e5c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
     e60:	68 94       	set
     e62:	ff 24       	eor	r15, r15
     e64:	f3 f8       	bld	r15, 3
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
	uint16_t seed = 0;
     e66:	c0 e0       	ldi	r28, 0x00	; 0
     e68:	d0 e0       	ldi	r29, 0x00	; 0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
     e6a:	06 e4       	ldi	r16, 0x46	; 70
     e6c:	11 e0       	ldi	r17, 0x01	; 1
     e6e:	f8 01       	movw	r30, r16
     e70:	90 81       	ld	r25, Z
		seed = seed << 2;
     e72:	cc 0f       	add	r28, r28
     e74:	dd 1f       	adc	r29, r29
     e76:	cc 0f       	add	r28, r28
     e78:	dd 1f       	adc	r29, r29
		seed |= cur_random_val;
     e7a:	90 76       	andi	r25, 0x60	; 96
     e7c:	29 2f       	mov	r18, r25
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	36 95       	lsr	r19
     e82:	27 95       	ror	r18
     e84:	32 95       	swap	r19
     e86:	22 95       	swap	r18
     e88:	2f 70       	andi	r18, 0x0F	; 15
     e8a:	23 27       	eor	r18, r19
     e8c:	3f 70       	andi	r19, 0x0F	; 15
     e8e:	23 27       	eor	r18, r19
     e90:	c2 2b       	or	r28, r18
     e92:	d3 2b       	or	r29, r19
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
     e94:	62 e0       	ldi	r22, 0x02	; 2
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	c6 df       	rcall	.-116    	; 0xe2a <__portable_avr_delay_cycles>
     e9e:	fa 94       	dec	r15

	/*
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
     ea0:	f1 10       	cpse	r15, r1
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
     ea2:	e5 cf       	rjmp	.-54     	; 0xe6e <tal_generate_rand_seed+0x2e>
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	39 de       	rcall	.-910    	; 0xb1a <set_trx_state>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_write(RG_IRQ_STATUS, 0xFF);
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
     eae:	88 e4       	ldi	r24, 0x48	; 72
     eb0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Set the seed for the random number generator. */
	srand(seed);
     eb4:	ce 01       	movw	r24, r28
     eb6:	0e 94 ac 12 	call	0x2558	; 0x2558 <srand>
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	08 95       	ret

00000ec6 <internal_tal_reset>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	f8 2e       	mov	r15, r24
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	TRX_SLP_TR_LOW();
     ed2:	c9 e3       	ldi	r28, 0x39	; 57
     ed4:	d1 e0       	ldi	r29, 0x01	; 1
     ed6:	88 81       	ld	r24, Y
     ed8:	8d 7f       	andi	r24, 0xFD	; 253
     eda:	88 83       	st	Y, r24
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
     edc:	61 e4       	ldi	r22, 0x41	; 65
     ede:	71 e0       	ldi	r23, 0x01	; 1
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a2 df       	rcall	.-188    	; 0xe2a <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
     ee6:	88 81       	ld	r24, Y
     ee8:	8e 7f       	andi	r24, 0xFE	; 254
     eea:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
     eec:	62 e0       	ldi	r22, 0x02	; 2
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9a df       	rcall	.-204    	; 0xe2a <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
     ef6:	88 81       	ld	r24, Y
     ef8:	81 60       	ori	r24, 0x01	; 1
     efa:	88 83       	st	Y, r24

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
     efc:	66 e8       	ldi	r22, 0x86	; 134
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	92 df       	rcall	.-220    	; 0xe2a <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
     f06:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
     f0a:	8f 71       	andi	r24, 0x1F	; 31
     f0c:	ca e0       	ldi	r28, 0x0A	; 10
     f0e:	01 e4       	ldi	r16, 0x41	; 65
     f10:	11 e0       	ldi	r17, 0x01	; 1
     f12:	0a c0       	rjmp	.+20     	; 0xf28 <internal_tal_reset+0x62>
	TRX_RST_HIGH();

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
     f14:	66 e8       	ldi	r22, 0x86	; 134
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	86 df       	rcall	.-244    	; 0xe2a <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
     f1e:	f8 01       	movw	r30, r16
     f20:	80 81       	ld	r24, Z
     f22:	8f 71       	andi	r24, 0x1F	; 31
     f24:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
     f26:	c9 f1       	breq	.+114    	; 0xf9a <internal_tal_reset+0xd4>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
     f28:	88 30       	cpi	r24, 0x08	; 8

	tal_trx_status = TRX_OFF;
     f2a:	a1 f7       	brne	.-24     	; 0xf14 <internal_tal_reset+0x4e>
     f2c:	80 93 ea 52 	sts	0x52EA, r24	; 0x8052ea <tal_trx_status>

	/*
	 * Generate a seed for the random number generator in function rand().
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	tal_generate_rand_seed();
     f30:	87 df       	rcall	.-242    	; 0xe40 <tal_generate_rand_seed>
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
     f32:	0e 94 a9 12 	call	0x2552	; 0x2552 <rand>
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
     f36:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
     f3a:	ee e6       	ldi	r30, 0x6E	; 110
     f3c:	f1 e0       	ldi	r31, 0x01	; 1
     f3e:	80 81       	ld	r24, Z
     f40:	97 70       	andi	r25, 0x07	; 7
     f42:	88 7f       	andi	r24, 0xF8	; 248
     f44:	89 2b       	or	r24, r25
     f46:	80 83       	st	Z, r24

	trx_bit_write(SR_AACK_SET_PD, PD_ACK_BIT_SET_ENABLE); /* ACKs for
     f48:	80 81       	ld	r24, Z
     f4a:	80 62       	ori	r24, 0x20	; 32
     f4c:	80 83       	st	Z, r24
	                                                       * data
	                                                       * requests,
	                                                       * indicate
	                                                       * pending data
	                                                       **/
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
     f4e:	ec e4       	ldi	r30, 0x4C	; 76
     f50:	f1 e0       	ldi	r31, 0x01	; 1
     f52:	80 81       	ld	r24, Z
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	80 83       	st	Z, r24
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
     f58:	88 e4       	ldi	r24, 0x48	; 72
     f5a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	/* The TX start timestamp is taken by the respective PAL layer */
	trx_reg_write(RG_IRQ_MASK1, (1 << TX_START_EN));
#endif
	trx_reg_write(0x156, 0xFF); /* RPC feature configuration. */
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
     f64:	ed e4       	ldi	r30, 0x4D	; 77
     f66:	f1 e0       	ldi	r31, 0x01	; 1
     f68:	80 81       	ld	r24, Z
     f6a:	8c 7f       	andi	r24, 0xFC	; 252
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	80 83       	st	Z, r24
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
     f70:	aa e4       	ldi	r26, 0x4A	; 74
     f72:	b1 e0       	ldi	r27, 0x01	; 1
     f74:	8c 91       	ld	r24, X
     f76:	80 7f       	andi	r24, 0xF0	; 240
     f78:	83 60       	ori	r24, 0x03	; 3
     f7a:	8c 93       	st	X, r24
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
     f7c:	80 81       	ld	r24, Z
     f7e:	88 60       	ori	r24, 0x08	; 8
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
     f80:	80 83       	st	Z, r24
     f82:	80 81       	ld	r24, Z
	tal_generate_rand_seed();

	/* Configure the transceiver register values. */
	trx_config();

	if (set_default_pib) {
     f84:	84 60       	ori	r24, 0x04	; 4
		/* Set the default PIB values */
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
     f86:	80 83       	st	Z, r24
     f88:	f1 10       	cpse	r15, r1

	/*
	 * Write all PIB values to the transceiver
	 * that are needed by the transceiver itself.
	 */
	write_all_tal_pib_to_trx(); /* implementation can be found in
     f8a:	30 d2       	rcall	.+1120   	; 0x13ec <init_tal_pib>
     f8c:	7d d2       	rcall	.+1274   	; 0x1488 <write_all_tal_pib_to_trx>
	                             *'tal_pib.c' */

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
     f8e:	10 92 ef 52 	sts	0x52EF, r1	; 0x8052ef <tal_state>

#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	tal_beacon_transmission = false;
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;
     f92:	10 92 c3 52 	sts	0x52C3, r1	; 0x8052c3 <tal_rx_on_required>

	return MAC_SUCCESS;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <internal_tal_reset+0xd6>
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
	if (trx_reset() != MAC_SUCCESS) {
		return FAILURE;
     f9a:	85 e8       	ldi	r24, 0x85	; 133
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;

	return MAC_SUCCESS;
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	08 95       	ret

00000fa8 <tal_init>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
retval_t tal_init(void)
{
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
	MCUSR = 0;
     fb8:	14 be       	out	0x34, r1	; 52

	/* Enable SRAM Data Retention */
	DRTRAM0 = _BV(ENDRT);
     fba:	80 e1       	ldi	r24, 0x10	; 16
     fbc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	DRTRAM1 = _BV(ENDRT);
     fc0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	DRTRAM2 = _BV(ENDRT);
     fc4:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__TEXT_REGION_LENGTH__+0x7c0133>
	DRTRAM3 = _BV(ENDRT);
     fc8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
     fcc:	92 dc       	rcall	.-1756   	; 0x8f2 <pal_init>
     fce:	81 11       	cpse	r24, r1
     fd0:	6d c0       	rjmp	.+218    	; 0x10ac <tal_init+0x104>
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
     fd2:	60 e4       	ldi	r22, 0x40	; 64
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	ba da       	rcall	.-2700   	; 0x54c <sysclk_enable_module>
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
	TRX_RST_HIGH();
     fd8:	c9 e3       	ldi	r28, 0x39	; 57
     fda:	d1 e0       	ldi	r29, 0x01	; 1
     fdc:	88 81       	ld	r24, Y
     fde:	81 60       	ori	r24, 0x01	; 1
     fe0:	88 83       	st	Y, r24
	TRX_SLP_TR_LOW();
     fe2:	88 81       	ld	r24, Y
     fe4:	8d 7f       	andi	r24, 0xFD	; 253
     fe6:	88 83       	st	Y, r24

	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
     fe8:	6b ef       	ldi	r22, 0xFB	; 251
     fea:	71 e0       	ldi	r23, 0x01	; 1
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	1c df       	rcall	.-456    	; 0xe2a <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
     ff2:	88 81       	ld	r24, Y
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	14 df       	rcall	.-472    	; 0xe2a <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1002:	88 81       	ld	r24, Y
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	88 83       	st	Y, r24

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1008:	66 e8       	ldi	r22, 0x86	; 134
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0c df       	rcall	.-488    	; 0xe2a <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1012:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1016:	8f 71       	andi	r24, 0x1F	; 31
    1018:	ca e0       	ldi	r28, 0x0A	; 10
    101a:	01 e4       	ldi	r16, 0x41	; 65
    101c:	11 e0       	ldi	r17, 0x01	; 1

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    101e:	0b c0       	rjmp	.+22     	; 0x1036 <tal_init+0x8e>
    1020:	66 e8       	ldi	r22, 0x86	; 134
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	00 df       	rcall	.-512    	; 0xe2a <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    102a:	f8 01       	movw	r30, r16
    102c:	80 81       	ld	r24, Z
    102e:	8f 71       	andi	r24, 0x1F	; 31
    1030:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == RESET_TO_TRX_OFF_ATTEMPTS) {
    1032:	09 f4       	brne	.+2      	; 0x1036 <tal_init+0x8e>
    1034:	51 c0       	rjmp	.+162    	; 0x10d8 <tal_init+0x130>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1036:	88 30       	cpi	r24, 0x08	; 8
    1038:	99 f7       	brne	.-26     	; 0x1020 <tal_init+0x78>

	tal_trx_status = TRX_OFF;
    103a:	80 93 ea 52 	sts	0x52EA, r24	; 0x8052ea <tal_trx_status>

#if !defined(FPGA_EMULATION)
	/* Check if actually running on an ATmegaRFR2 device. */
	if (ATMEGARFR2_PART_NUM != trx_reg_read(RG_PART_NUM)) {
    103e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7c015c>
    1042:	84 39       	cpi	r24, 0x94	; 148
    1044:	09 f0       	breq	.+2      	; 0x1048 <tal_init+0xa0>
    1046:	48 c0       	rjmp	.+144    	; 0x10d8 <tal_init+0x130>
    1048:	35 c0       	rjmp	.+106    	; 0x10b4 <tal_init+0x10c>
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
			*ptr_pib++ = (uint8_t)rand();
    104a:	0e 94 a9 12 	call	0x2552	; 0x2552 <rand>
    104e:	f8 01       	movw	r30, r16
    1050:	81 93       	st	Z+, r24
    1052:	8f 01       	movw	r16, r30
		 * generated
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
    1054:	ec 15       	cp	r30, r12
    1056:	fd 05       	cpc	r31, r13
    1058:	c1 f7       	brne	.-16     	; 0x104a <tal_init+0xa2>
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    105a:	f7 01       	movw	r30, r14
    105c:	20 81       	ld	r18, Z
    105e:	31 81       	ldd	r19, Z+1	; 0x01
    1060:	42 81       	ldd	r20, Z+2	; 0x02
    1062:	53 81       	ldd	r21, Z+3	; 0x03
    1064:	64 81       	ldd	r22, Z+4	; 0x04
    1066:	75 81       	ldd	r23, Z+5	; 0x05
    1068:	86 81       	ldd	r24, Z+6	; 0x06
    106a:	97 81       	ldd	r25, Z+7	; 0x07
    106c:	af ef       	ldi	r26, 0xFF	; 255
    106e:	0e 94 4a 12 	call	0x2494	; 0x2494 <__adddi3_s8>
    1072:	ad ef       	ldi	r26, 0xFD	; 253
    1074:	0e 94 56 12 	call	0x24ac	; 0x24ac <__cmpdi2_s8>
    1078:	21 f0       	breq	.+8      	; 0x1082 <tal_init+0xda>
    107a:	18 f0       	brcs	.+6      	; 0x1082 <tal_init+0xda>
    107c:	0b ec       	ldi	r16, 0xCB	; 203
    107e:	12 e5       	ldi	r17, 0x52	; 82

	/*
	 * Configure interrupt handling.
	 * Install handlers for the transceiver interrupts.
	 */
	pal_trx_irq_init_rx_end((FUNC_PTR)trx_rx_end_handler_cb);
    1080:	e4 cf       	rjmp	.-56     	; 0x104a <tal_init+0xa2>
    1082:	80 ea       	ldi	r24, 0xA0	; 160
    1084:	99 e0       	ldi	r25, 0x09	; 9
	pal_trx_irq_init_tx_end((FUNC_PTR)trx_tx_end_handler_cb);
    1086:	38 d0       	rcall	.+112    	; 0x10f8 <pal_trx_irq_init_rx_end>
    1088:	81 eb       	ldi	r24, 0xB1	; 177
    108a:	99 e0       	ldi	r25, 0x09	; 9
	pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    108c:	30 d0       	rcall	.+96     	; 0x10ee <pal_trx_irq_init_tx_end>
    108e:	82 ec       	ldi	r24, 0xC2	; 194
    1090:	99 e0       	ldi	r25, 0x09	; 9
    1092:	37 d0       	rcall	.+110    	; 0x1102 <pal_trx_irq_init_awake>
	pal_trx_irq_init_tstamp((FUNC_PTR)trx_irq_timestamp_handler_cb);
#endif /* (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Initialize the buffer management module and get a buffer to store
	 * reveived frames. */
	bmm_buffer_init();
    1094:	32 dc       	rcall	.-1948   	; 0x8fa <bmm_buffer_init>
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1096:	8b e8       	ldi	r24, 0x8B	; 139
    1098:	54 dc       	rcall	.-1880   	; 0x942 <bmm_buffer_alloc>
    109a:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <tal_rx_buffer+0x1>
    109e:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <tal_rx_buffer>
	/* Init incoming frame queue */
#ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&tal_incoming_frame_queue,
			TAL_INCOMING_FRAME_QUEUE_CAPACITY);
#else
	qmm_queue_init(&tal_incoming_frame_queue);
    10a2:	84 ec       	ldi	r24, 0xC4	; 196
    10a4:	92 e5       	ldi	r25, 0x52	; 82
    10a6:	de dc       	rcall	.-1604   	; 0xa64 <qmm_queue_init>
    10a8:	17 d5       	rcall	.+2606   	; 0x1ad8 <tfa_init>
#endif  /* ENABLE_QUEUE_CAPACITY */

#ifdef ENABLE_TFA
	tfa_init();
    10aa:	17 c0       	rjmp	.+46     	; 0x10da <tal_init+0x132>
    10ac:	c5 e8       	ldi	r28, 0x85	; 133
#endif

	return MAC_SUCCESS;
    10ae:	15 c0       	rjmp	.+42     	; 0x10da <tal_init+0x132>
	DRTRAM2 = _BV(ENDRT);
	DRTRAM3 = _BV(ENDRT);

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
    10b0:	c5 e8       	ldi	r28, 0x85	; 133
    10b2:	13 c0       	rjmp	.+38     	; 0x10da <tal_init+0x132>
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
		return FAILURE;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	07 df       	rcall	.-498    	; 0xec6 <internal_tal_reset>
	/*
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
    10b8:	c8 2f       	mov	r28, r24
    10ba:	81 11       	cpse	r24, r1
    10bc:	f9 cf       	rjmp	.-14     	; 0x10b0 <tal_init+0x108>
    10be:	0f 2e       	mov	r0, r31
    10c0:	fb ec       	ldi	r31, 0xCB	; 203
    10c2:	ef 2e       	mov	r14, r31
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    10c4:	f2 e5       	ldi	r31, 0x52	; 82
    10c6:	ff 2e       	mov	r15, r31
    10c8:	f0 2d       	mov	r31, r0
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f3 ed       	ldi	r31, 0xD3	; 211
    10ce:	cf 2e       	mov	r12, r31
    10d0:	f2 e5       	ldi	r31, 0x52	; 82
    10d2:	df 2e       	mov	r13, r31
    10d4:	f0 2d       	mov	r31, r0
    10d6:	c1 cf       	rjmp	.-126    	; 0x105a <tal_init+0xb2>
    10d8:	c5 e8       	ldi	r28, 0x85	; 133
    10da:	8c 2f       	mov	r24, r28
    10dc:	df 91       	pop	r29
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
	}

	if (trx_init() != MAC_SUCCESS) {
		return FAILURE;
    10de:	cf 91       	pop	r28
#ifdef ENABLE_TFA
	tfa_init();
#endif

	return MAC_SUCCESS;
} /* tal_init() */
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	08 95       	ret

000010ee <pal_trx_irq_init_tx_end>:
    10ee:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <irq_hdl_trx_tx_end+0x1>
    10f2:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <irq_hdl_trx_tx_end>
 *
 * \param trx_irq_cb Callback function for the transceiver CCA ED END interrupt
 */
void pal_trx_irq_init_cca_ed(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_cca_ed = (irq_handler_t)trx_irq_cb;
    10f6:	08 95       	ret

000010f8 <pal_trx_irq_init_rx_end>:
    10f8:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <irq_hdl_trx_rx_end+0x1>
    10fc:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <irq_hdl_trx_rx_end>
    1100:	08 95       	ret

00001102 <pal_trx_irq_init_awake>:
 *
 * \param trx_irq_cb Callback function for the transceiver AWAKE interrupt
 */
void pal_trx_irq_init_awake(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_awake = (irq_handler_t)trx_irq_cb;
    1102:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <irq_hdl_trx_awake+0x1>
    1106:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <irq_hdl_trx_awake>
    110a:	08 95       	ret

0000110c <__vector_63>:

/**
 * \brief ISR for transceiver's transmit end interrupt
 */
ISR(TRX24_TX_END_vect)
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	0b b6       	in	r0, 0x3b	; 59
    1118:	0f 92       	push	r0
    111a:	2f 93       	push	r18
    111c:	3f 93       	push	r19
    111e:	4f 93       	push	r20
    1120:	5f 93       	push	r21
    1122:	6f 93       	push	r22
    1124:	7f 93       	push	r23
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	af 93       	push	r26
    112c:	bf 93       	push	r27
    112e:	ef 93       	push	r30
    1130:	ff 93       	push	r31
	irq_hdl_trx_tx_end();
    1132:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <irq_hdl_trx_tx_end>
    1136:	f0 91 d1 03 	lds	r31, 0x03D1	; 0x8003d1 <irq_hdl_trx_tx_end+0x1>
    113a:	19 95       	eicall
}
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0b be       	out	0x3b, r0	; 59
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	0f 90       	pop	r0
    115e:	1f 90       	pop	r1
    1160:	18 95       	reti

00001162 <__vector_60>:

/**
 * \brief ISR for transceiver's receive end interrupt
 */
ISR(TRX24_RX_END_vect)
{
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	0b b6       	in	r0, 0x3b	; 59
    116e:	0f 92       	push	r0
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
	irq_hdl_trx_rx_end();
    1188:	e0 91 ce 03 	lds	r30, 0x03CE	; 0x8003ce <irq_hdl_trx_rx_end>
    118c:	f0 91 cf 03 	lds	r31, 0x03CF	; 0x8003cf <irq_hdl_trx_rx_end+0x1>
    1190:	19 95       	eicall
}
    1192:	ff 91       	pop	r31
    1194:	ef 91       	pop	r30
    1196:	bf 91       	pop	r27
    1198:	af 91       	pop	r26
    119a:	9f 91       	pop	r25
    119c:	8f 91       	pop	r24
    119e:	7f 91       	pop	r23
    11a0:	6f 91       	pop	r22
    11a2:	5f 91       	pop	r21
    11a4:	4f 91       	pop	r20
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	0f 90       	pop	r0
    11ac:	0b be       	out	0x3b, r0	; 59
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	0f 90       	pop	r0
    11b4:	1f 90       	pop	r1
    11b6:	18 95       	reti

000011b8 <__vector_61>:

/**
 * \brief ISR for transceiver's CCA/ED measurement done interrupt
 */
ISR(TRX24_CCA_ED_DONE_vect)
{
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	0b b6       	in	r0, 0x3b	; 59
    11c4:	0f 92       	push	r0
    11c6:	2f 93       	push	r18
    11c8:	3f 93       	push	r19
    11ca:	4f 93       	push	r20
    11cc:	5f 93       	push	r21
    11ce:	6f 93       	push	r22
    11d0:	7f 93       	push	r23
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
	irq_hdl_trx_cca_ed();
    11de:	e0 91 cc 03 	lds	r30, 0x03CC	; 0x8003cc <irq_hdl_trx_cca_ed>
    11e2:	f0 91 cd 03 	lds	r31, 0x03CD	; 0x8003cd <irq_hdl_trx_cca_ed+0x1>
    11e6:	19 95       	eicall
}
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0b be       	out	0x3b, r0	; 59
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <__vector_64>:

/**
 * \brief ISR for transceiver's Awake interrupt
 */
ISR(TRX24_AWAKE_vect)
{
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	0b b6       	in	r0, 0x3b	; 59
    121a:	0f 92       	push	r0
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
	irq_hdl_trx_awake();
    1234:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <irq_hdl_trx_awake>
    1238:	f0 91 cb 03 	lds	r31, 0x03CB	; 0x8003cb <irq_hdl_trx_awake+0x1>
    123c:	19 95       	eicall
}
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	bf 91       	pop	r27
    1244:	af 91       	pop	r26
    1246:	9f 91       	pop	r25
    1248:	8f 91       	pop	r24
    124a:	7f 91       	pop	r23
    124c:	6f 91       	pop	r22
    124e:	5f 91       	pop	r21
    1250:	4f 91       	pop	r20
    1252:	3f 91       	pop	r19
    1254:	2f 91       	pop	r18
    1256:	0f 90       	pop	r0
    1258:	0b be       	out	0x3b, r0	; 59
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <__vector_59>:
 *
 * By the time the SFD is detected, the hardware timestamps the
 * current frame in the SCTSR register.
 */
ISR(TRX24_RX_START_vect)
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	irq_hdl_trx_tstamp();
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */
}
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_57>:

/**
 * \brief ISR for transceiver's PLL lock interrupt
 */
ISR(TRX24_PLL_LOCK_vect)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_lock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_58>:

/**
 * \brief ISR for transceiver's PLL unlock interrupt
 */
ISR(TRX24_PLL_UNLOCK_vect)
{
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_unlock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <__vector_62>:

/**
 * \brief ISR for transceiver's address match interrupt
 */
ISR(TRX24_XAH_AMI_vect)
{
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <__vector_71>:

/**
 * \brief ISR for transceiver's battery low interrupt
 */
ISR(BAT_LOW_vect)
{
    12b4:	1f 92       	push	r1
    12b6:	0f 92       	push	r0
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_batmon();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <__vector_70>:

/**
 * \brief ISR for transceiver's AES interrupt
 */
ISR(AES_READY_vect)
{
    12c8:	1f 92       	push	r1
    12ca:	0f 92       	push	r0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	0f 92       	push	r0
    12d0:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_aes_ready();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <__vector_72>:

/**
 * \brief ISR for transceiver's TX_START interrupt
 */
ISR(TRX24_TX_START_vect)
{
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	11 24       	eor	r1, r1
	pal_tx_timestamp = PAL_US_PER_SYMBOLS * SC_READ32(SCCNT);
#endif
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_tx_start();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <__vector_73>:

/**
 * \brief ISR for transceiver's AMI0 interrupt
 */
ISR(TRX24_AMI0_vect)
{
    12f0:	1f 92       	push	r1
    12f2:	0f 92       	push	r0
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	0f 92       	push	r0
    12f8:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami0();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    12fa:	0f 90       	pop	r0
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	0f 90       	pop	r0
    1300:	1f 90       	pop	r1
    1302:	18 95       	reti

00001304 <__vector_74>:

/**
 * \brief ISR for transceiver's AMI1 interrupt
 */
ISR(TRX24_AMI1_vect)
{
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami1();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <__vector_75>:

/**
 * \brief ISR for transceiver's AMI2 interrupt
 */
ISR(TRX24_AMI2_vect)
{
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami2();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_76>:

/**
 * \brief ISR for transceiver's AMI3 interrupt
 */
ISR(TRX24_AMI3_vect)
{
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami3();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <trx_rx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for RX end.
 */
void trx_rx_end_handler_cb(void)
{
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	1f 92       	push	r1
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    134c:	8f b7       	in	r24, 0x3f	; 63
    134e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1350:	f8 94       	cli
	return flags;
    1352:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Handle rx interrupt. */
	handle_received_frame_irq(); /* see tal_rx.c */
    1354:	19 d2       	rcall	.+1074   	; 0x1788 <handle_received_frame_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1356:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_rx_end_handler_cb() */
    1358:	0f 90       	pop	r0
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	08 95       	ret

00001362 <trx_tx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for TX end.
 */
void trx_tx_end_handler_cb(void)
{
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	1f 92       	push	r1
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    136e:	8f b7       	in	r24, 0x3f	; 63
    1370:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1372:	f8 94       	cli
	return flags;
    1374:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Get the result and push it to the queue. */
	handle_tx_end_irq();        /* see tal_tx.c */
    1376:	f2 d2       	rcall	.+1508   	; 0x195c <handle_tx_end_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1378:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_tx_end_handler_cb() */
    137a:	0f 90       	pop	r0
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	08 95       	ret

00001384 <trx_awake_handler_cb>:
 * This function handles the transceiver awake end interrupt.
 */
void trx_awake_handler_cb(void)
{
	/* Set the wake-up flag. */
	tal_awake_end_flag = true;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 ee 52 	sts	0x52EE, r24	; 0x8052ee <tal_awake_end_flag>
    138a:	08 95       	ret

0000138c <limit_tx_pwr>:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
} /* tal_pib_get() */
    138c:	85 fd       	sbrc	r24, 5
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <limit_tx_pwr+0xa>
    1390:	98 2f       	mov	r25, r24
    1392:	9f 73       	andi	r25, 0x3F	; 63
    1394:	04 c0       	rjmp	.+8      	; 0x139e <limit_tx_pwr+0x12>
    1396:	98 2f       	mov	r25, r24
    1398:	91 95       	neg	r25
    139a:	9f 71       	andi	r25, 0x1F	; 31
    139c:	91 95       	neg	r25
    139e:	e2 e6       	ldi	r30, 0x62	; 98
    13a0:	f1 e0       	ldi	r31, 0x01	; 1
    13a2:	24 91       	lpm	r18, Z
    13a4:	29 17       	cp	r18, r25
    13a6:	54 f4       	brge	.+20     	; 0x13bc <limit_tx_pwr+0x30>
    13a8:	84 91       	lpm	r24, Z
    13aa:	80 3e       	cpi	r24, 0xE0	; 224
    13ac:	b4 f0       	brlt	.+44     	; 0x13da <limit_tx_pwr+0x4e>
    13ae:	80 32       	cpi	r24, 0x20	; 32
    13b0:	b4 f4       	brge	.+44     	; 0x13de <limit_tx_pwr+0x52>
    13b2:	88 23       	and	r24, r24
    13b4:	cc f4       	brge	.+50     	; 0x13e8 <limit_tx_pwr+0x5c>
    13b6:	8f 71       	andi	r24, 0x1F	; 31
    13b8:	80 62       	ori	r24, 0x20	; 32
    13ba:	16 c0       	rjmp	.+44     	; 0x13e8 <limit_tx_pwr+0x5c>
    13bc:	e1 e7       	ldi	r30, 0x71	; 113
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	24 91       	lpm	r18, Z
    13c2:	92 17       	cp	r25, r18
    13c4:	8c f4       	brge	.+34     	; 0x13e8 <limit_tx_pwr+0x5c>
    13c6:	84 91       	lpm	r24, Z
    13c8:	80 3e       	cpi	r24, 0xE0	; 224
    13ca:	5c f0       	brlt	.+22     	; 0x13e2 <limit_tx_pwr+0x56>
    13cc:	80 32       	cpi	r24, 0x20	; 32
    13ce:	5c f4       	brge	.+22     	; 0x13e6 <limit_tx_pwr+0x5a>
    13d0:	88 23       	and	r24, r24
    13d2:	54 f4       	brge	.+20     	; 0x13e8 <limit_tx_pwr+0x5c>
    13d4:	8f 71       	andi	r24, 0x1F	; 31
    13d6:	80 62       	ori	r24, 0x20	; 32
    13d8:	07 c0       	rjmp	.+14     	; 0x13e8 <limit_tx_pwr+0x5c>
    13da:	80 e2       	ldi	r24, 0x20	; 32
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <limit_tx_pwr+0x5c>
    13de:	8f e1       	ldi	r24, 0x1F	; 31
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <limit_tx_pwr+0x5c>
    13e2:	80 e2       	ldi	r24, 0x20	; 32
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <limit_tx_pwr+0x5c>
    13e6:	8f e1       	ldi	r24, 0x1F	; 31
    13e8:	80 68       	ori	r24, 0x80	; 128
    13ea:	08 95       	ret

000013ec <init_tal_pib>:
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cb ec       	ldi	r28, 0xCB	; 203
    13f2:	d2 e5       	ldi	r29, 0x52	; 82
    13f4:	84 e0       	ldi	r24, 0x04	; 4
    13f6:	8c 8b       	std	Y+20, r24	; 0x14
    13f8:	83 e0       	ldi	r24, 0x03	; 3
    13fa:	8d 8b       	std	Y+21, r24	; 0x15
    13fc:	2f ef       	ldi	r18, 0xFF	; 255
    13fe:	3f ef       	ldi	r19, 0xFF	; 255
    1400:	3f 87       	std	Y+15, r19	; 0x0f
    1402:	2e 87       	std	Y+14, r18	; 0x0e
    1404:	3d 87       	std	Y+13, r19	; 0x0d
    1406:	2c 87       	std	Y+12, r18	; 0x0c
    1408:	9b e0       	ldi	r25, 0x0B	; 11
    140a:	9b 8b       	std	Y+19, r25	; 0x13
    140c:	18 8e       	std	Y+24, r1	; 0x18
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	58 ef       	ldi	r21, 0xF8	; 248
    1412:	6f ef       	ldi	r22, 0xFF	; 255
    1414:	77 e0       	ldi	r23, 0x07	; 7
    1416:	48 87       	std	Y+8, r20	; 0x08
    1418:	59 87       	std	Y+9, r21	; 0x09
    141a:	6a 87       	std	Y+10, r22	; 0x0a
    141c:	7b 87       	std	Y+11, r23	; 0x0b
    141e:	2a e0       	ldi	r18, 0x0A	; 10
    1420:	31 e0       	ldi	r19, 0x01	; 1
    1422:	39 8b       	std	Y+17, r19	; 0x11
    1424:	28 8b       	std	Y+16, r18	; 0x10
    1426:	9a e0       	ldi	r25, 0x0A	; 10
    1428:	99 8f       	std	Y+25, r25	; 0x19
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	9a 8f       	std	Y+26, r25	; 0x1a
    142e:	95 e0       	ldi	r25, 0x05	; 5
    1430:	9b 8f       	std	Y+27, r25	; 0x1b
    1432:	8c 8f       	std	Y+28, r24	; 0x1c
    1434:	84 e8       	ldi	r24, 0x84	; 132
    1436:	aa df       	rcall	.-172    	; 0x138c <limit_tx_pwr>
    1438:	8f 8b       	std	Y+23, r24	; 0x17
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	8a 8b       	std	Y+18, r24	; 0x12
    143e:	1e 8a       	std	Y+22, r1	; 0x16
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	08 95       	ret

00001446 <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    1446:	85 fd       	sbrc	r24, 5
    1448:	02 c0       	rjmp	.+4      	; 0x144e <convert_phyTransmitPower_to_reg_value+0x8>
    144a:	8f 73       	andi	r24, 0x3F	; 63
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <convert_phyTransmitPower_to_reg_value+0xe>
    144e:	81 95       	neg	r24
    1450:	8f 71       	andi	r24, 0x1F	; 31
    1452:	81 95       	neg	r24

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    1454:	e2 e6       	ldi	r30, 0x62	; 98
    1456:	f1 e0       	ldi	r31, 0x01	; 1
    1458:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    145a:	89 17       	cp	r24, r25
    145c:	3c f4       	brge	.+14     	; 0x146c <convert_phyTransmitPower_to_reg_value+0x26>
    145e:	e3 e6       	ldi	r30, 0x63	; 99
    1460:	f1 e0       	ldi	r31, 0x01	; 1
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    1462:	21 e0       	ldi	r18, 0x01	; 1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    1464:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    1466:	89 17       	cp	r24, r25
    1468:	3c f0       	brlt	.+14     	; 0x1478 <convert_phyTransmitPower_to_reg_value+0x32>
    146a:	01 c0       	rjmp	.+2      	; 0x146e <convert_phyTransmitPower_to_reg_value+0x28>
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    146c:	20 e0       	ldi	r18, 0x00	; 0
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
			if (trx_tx_level < dbm_value) {
    146e:	98 17       	cp	r25, r24
    1470:	4c f4       	brge	.+18     	; 0x1484 <convert_phyTransmitPower_to_reg_value+0x3e>
				return (i - 1);
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	82 0f       	add	r24, r18
    1476:	08 95       	ret
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    1478:	2f 5f       	subi	r18, 0xFF	; 255
    147a:	31 96       	adiw	r30, 0x01	; 1
    147c:	20 31       	cpi	r18, 0x10	; 16
    147e:	91 f7       	brne	.-28     	; 0x1464 <convert_phyTransmitPower_to_reg_value+0x1e>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	08 95       	ret
    1484:	82 2f       	mov	r24, r18
}
    1486:	08 95       	ret

00001488 <write_all_tal_pib_to_trx>:
 *
 * This function writes all shadow PIB variables to the transceiver.
 * It is assumed that the radio does not sleep.
 */
void write_all_tal_pib_to_trx(void)
{
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
	uint8_t *ptr_to_reg;

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    148c:	eb ec       	ldi	r30, 0xCB	; 203
    148e:	f2 e5       	ldi	r31, 0x52	; 82
    1490:	86 85       	ldd	r24, Z+14	; 0x0e
    1492:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));
    1496:	87 85       	ldd	r24, Z+15	; 0x0f
    1498:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    149c:	e4 e6       	ldi	r30, 0x64	; 100
    149e:	f1 e0       	ldi	r31, 0x01	; 1

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
    14a0:	ab ec       	ldi	r26, 0xCB	; 203
    14a2:	b2 e5       	ldi	r27, 0x52	; 82
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    14a4:	8d 91       	ld	r24, X+
    14a6:	81 93       	st	Z+, r24

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
	for (uint8_t i = 0; i < 8; i++) {
    14a8:	ec 36       	cpi	r30, 0x6C	; 108
    14aa:	31 e0       	ldi	r19, 0x01	; 1
    14ac:	f3 07       	cpc	r31, r19
    14ae:	d1 f7       	brne	.-12     	; 0x14a4 <write_all_tal_pib_to_trx+0x1c>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}

	trx_reg_write(RG_SHORT_ADDR_0, (uint8_t)tal_pib.ShortAddress);
    14b0:	eb ec       	ldi	r30, 0xCB	; 203
    14b2:	f2 e5       	ldi	r31, 0x52	; 82
    14b4:	84 85       	ldd	r24, Z+12	; 0x0c
    14b6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
	trx_reg_write(RG_SHORT_ADDR_1,
    14ba:	85 85       	ldd	r24, Z+13	; 0x0d
    14bc:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			(uint8_t)(tal_pib.ShortAddress >> 8));

	/* configure TX_ARET; CSMA and CCA */
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    14c0:	48 e4       	ldi	r20, 0x48	; 72
    14c2:	51 e0       	ldi	r21, 0x01	; 1
    14c4:	da 01       	movw	r26, r20
    14c6:	8c 91       	ld	r24, X
    14c8:	22 89       	ldd	r18, Z+18	; 0x12
    14ca:	b0 e2       	ldi	r27, 0x20	; 32
    14cc:	2b 9f       	mul	r18, r27
    14ce:	90 01       	movw	r18, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	20 76       	andi	r18, 0x60	; 96
    14d4:	8f 79       	andi	r24, 0x9F	; 159
    14d6:	82 2b       	or	r24, r18
    14d8:	da 01       	movw	r26, r20
    14da:	8c 93       	st	X, r24
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    14dc:	cf e6       	ldi	r28, 0x6F	; 111
    14de:	d1 e0       	ldi	r29, 0x01	; 1
    14e0:	88 81       	ld	r24, Y
    14e2:	95 89       	ldd	r25, Z+21	; 0x15
    14e4:	9f 70       	andi	r25, 0x0F	; 15
    14e6:	80 7f       	andi	r24, 0xF0	; 240
    14e8:	89 2b       	or	r24, r25
    14ea:	88 83       	st	Y, r24

	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    14ec:	2e e6       	ldi	r18, 0x6E	; 110
    14ee:	31 e0       	ldi	r19, 0x01	; 1
    14f0:	d9 01       	movw	r26, r18
    14f2:	8c 91       	ld	r24, X
    14f4:	96 89       	ldd	r25, Z+22	; 0x16
    14f6:	99 0f       	add	r25, r25
    14f8:	99 0f       	add	r25, r25
    14fa:	99 0f       	add	r25, r25
    14fc:	98 70       	andi	r25, 0x08	; 8
    14fe:	87 7f       	andi	r24, 0xF7	; 247
    1500:	89 2b       	or	r24, r25
    1502:	8c 93       	st	X, r24

	/* set phy parameter */
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    1504:	28 81       	ld	r18, Y
    1506:	93 8d       	ldd	r25, Z+27	; 0x1b
    1508:	b0 e1       	ldi	r27, 0x10	; 16
    150a:	9b 9f       	mul	r25, r27
    150c:	c0 01       	movw	r24, r0
    150e:	11 24       	eor	r1, r1
    1510:	92 2f       	mov	r25, r18
    1512:	9f 70       	andi	r25, 0x0F	; 15
    1514:	89 2b       	or	r24, r25
    1516:	88 83       	st	Y, r24

#ifdef HIGH_DATA_RATE_SUPPORT
	apply_channel_page_configuration(tal_pib.CurrentPage);
#endif

	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    1518:	da 01       	movw	r26, r20
    151a:	8c 91       	ld	r24, X
    151c:	93 89       	ldd	r25, Z+19	; 0x13
    151e:	9f 71       	andi	r25, 0x1F	; 31
    1520:	80 7e       	andi	r24, 0xE0	; 224
    1522:	89 2b       	or	r24, r25
    1524:	8c 93       	st	X, r24
	{
		uint8_t reg_value;

		reg_value = convert_phyTransmitPower_to_reg_value(
    1526:	87 89       	ldd	r24, Z+23	; 0x17
    1528:	8e df       	rcall	.-228    	; 0x1446 <convert_phyTransmitPower_to_reg_value>
				tal_pib.TransmitPower);
		trx_bit_write(SR_TX_PWR, reg_value);
    152a:	e5 e4       	ldi	r30, 0x45	; 69
    152c:	f1 e0       	ldi	r31, 0x01	; 1
    152e:	90 81       	ld	r25, Z
    1530:	90 7f       	andi	r25, 0xF0	; 240
    1532:	8f 70       	andi	r24, 0x0F	; 15
    1534:	89 2b       	or	r24, r25
    1536:	80 83       	st	Z, r24
#ifdef PROMISCUOUS_MODE
	if (tal_pib.PromiscuousMode) {
		set_trx_state(CMD_RX_ON);
	}
#endif
}
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <tal_pib_set>:
 *         in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 *         TAL_TRX_ASLEEP if trx is in SLEEP mode and access to trx is required
 */
retval_t tal_pib_set(uint8_t attribute, pib_value_t *value)
{
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
	 * and those that are simple variable udpates.
	 * Ensure that the transceiver is not in SLEEP.
	 * If it is in SLEEP, change it to TRX_OFF.
	 */

	switch (attribute) {
    1542:	8e 34       	cpi	r24, 0x4E	; 78
    1544:	41 f0       	breq	.+16     	; 0x1556 <tal_pib_set+0x18>
    1546:	89 35       	cpi	r24, 0x59	; 89
    1548:	61 f4       	brne	.+24     	; 0x1562 <tal_pib_set+0x24>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    154a:	fb 01       	movw	r30, r22
    154c:	80 81       	ld	r24, Z
    154e:	80 93 e7 52 	sts	0x52E7, r24	; 0x8052e7 <tal_pib+0x1c>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1552:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
		break;
    1554:	0b c1       	rjmp	.+534    	; 0x176c <tal_pib_set+0x22e>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    1556:	fb 01       	movw	r30, r22
    1558:	80 81       	ld	r24, Z
    155a:	80 93 df 52 	sts	0x52DF, r24	; 0x8052df <tal_pib+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    155e:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
		break;
    1560:	05 c1       	rjmp	.+522    	; 0x176c <tal_pib_set+0x22e>
		/*
		 * Following PIBs require access to trx.
		 * Therefore trx must be at least in TRX_OFF.
		 */

		if (tal_trx_status == TRX_SLEEP) {
    1562:	90 91 ea 52 	lds	r25, 0x52EA	; 0x8052ea <tal_trx_status>
    1566:	9f 30       	cpi	r25, 0x0F	; 15
    1568:	09 f4       	brne	.+2      	; 0x156c <tal_pib_set+0x2e>
    156a:	dc c0       	rjmp	.+440    	; 0x1724 <tal_pib_set+0x1e6>
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
		}

		switch (attribute) {
    156c:	8b 30       	cpi	r24, 0x0B	; 11
    156e:	09 f4       	brne	.+2      	; 0x1572 <tal_pib_set+0x34>
    1570:	c9 c0       	rjmp	.+402    	; 0x1704 <tal_pib_set+0x1c6>
    1572:	80 f4       	brcc	.+32     	; 0x1594 <tal_pib_set+0x56>
    1574:	eb 01       	movw	r28, r22
    1576:	82 30       	cpi	r24, 0x02	; 2
    1578:	09 f4       	brne	.+2      	; 0x157c <tal_pib_set+0x3e>
    157a:	84 c0       	rjmp	.+264    	; 0x1684 <tal_pib_set+0x146>
    157c:	20 f4       	brcc	.+8      	; 0x1586 <tal_pib_set+0x48>
    157e:	88 23       	and	r24, r24
    1580:	09 f4       	brne	.+2      	; 0x1584 <tal_pib_set+0x46>
    1582:	46 c0       	rjmp	.+140    	; 0x1610 <tal_pib_set+0xd2>
    1584:	d1 c0       	rjmp	.+418    	; 0x1728 <tal_pib_set+0x1ea>
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	09 f4       	brne	.+2      	; 0x158c <tal_pib_set+0x4e>
    158a:	8c c0       	rjmp	.+280    	; 0x16a4 <tal_pib_set+0x166>
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	09 f4       	brne	.+2      	; 0x1592 <tal_pib_set+0x54>
    1590:	5a c0       	rjmp	.+180    	; 0x1646 <tal_pib_set+0x108>
    1592:	ca c0       	rjmp	.+404    	; 0x1728 <tal_pib_set+0x1ea>
    1594:	83 35       	cpi	r24, 0x53	; 83
    1596:	79 f1       	breq	.+94     	; 0x15f6 <tal_pib_set+0xb8>
    1598:	28 f4       	brcc	.+10     	; 0x15a4 <tal_pib_set+0x66>
    159a:	8f 34       	cpi	r24, 0x4F	; 79
    159c:	51 f0       	breq	.+20     	; 0x15b2 <tal_pib_set+0x74>
    159e:	80 35       	cpi	r24, 0x50	; 80
    15a0:	e9 f0       	breq	.+58     	; 0x15dc <tal_pib_set+0x9e>
    15a2:	c2 c0       	rjmp	.+388    	; 0x1728 <tal_pib_set+0x1ea>
    15a4:	87 35       	cpi	r24, 0x57	; 87
    15a6:	09 f4       	brne	.+2      	; 0x15aa <tal_pib_set+0x6c>
    15a8:	56 c0       	rjmp	.+172    	; 0x1656 <tal_pib_set+0x118>
    15aa:	80 3f       	cpi	r24, 0xF0	; 240
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <tal_pib_set+0x72>
    15ae:	8b c0       	rjmp	.+278    	; 0x16c6 <tal_pib_set+0x188>
    15b0:	bb c0       	rjmp	.+374    	; 0x1728 <tal_pib_set+0x1ea>
		case macMinBE:
			tal_pib.MinBE = value->pib_value_8bit;
    15b2:	fb 01       	movw	r30, r22
    15b4:	80 81       	ld	r24, Z
    15b6:	eb ec       	ldi	r30, 0xCB	; 203
    15b8:	f2 e5       	ldi	r31, 0x52	; 82
    15ba:	85 8b       	std	Z+21, r24	; 0x15
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MinBE > tal_pib.MaxBE) {
    15bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    15be:	98 17       	cp	r25, r24
    15c0:	10 f4       	brcc	.+4      	; 0x15c6 <tal_pib_set+0x88>
				tal_pib.MinBE = tal_pib.MaxBE;
    15c2:	90 93 e0 52 	sts	0x52E0, r25	; 0x8052e0 <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    15c6:	ef e6       	ldi	r30, 0x6F	; 111
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	80 81       	ld	r24, Z
    15cc:	90 91 e0 52 	lds	r25, 0x52E0	; 0x8052e0 <tal_pib+0x15>
    15d0:	9f 70       	andi	r25, 0x0F	; 15
    15d2:	80 7f       	andi	r24, 0xF0	; 240
    15d4:	89 2b       	or	r24, r25
    15d6:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
			break;
    15da:	c8 c0       	rjmp	.+400    	; 0x176c <tal_pib_set+0x22e>

		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
    15dc:	fb 01       	movw	r30, r22
    15de:	90 81       	ld	r25, Z
    15e0:	81 81       	ldd	r24, Z+1	; 0x01
    15e2:	eb ec       	ldi	r30, 0xCB	; 203
    15e4:	f2 e5       	ldi	r31, 0x52	; 82
    15e6:	96 87       	std	Z+14, r25	; 0x0e
    15e8:	87 87       	std	Z+15, r24	; 0x0f
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    15ea:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
			trx_reg_write(RG_PAN_ID_1,
    15ee:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    15f2:	80 e0       	ldi	r24, 0x00	; 0
		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
			trx_reg_write(RG_PAN_ID_1,
					(uint8_t)(tal_pib.PANId >> 8));
			break;
    15f4:	bb c0       	rjmp	.+374    	; 0x176c <tal_pib_set+0x22e>

		case macShortAddress:
			tal_pib.ShortAddress = value->pib_value_16bit;
    15f6:	fb 01       	movw	r30, r22
    15f8:	90 81       	ld	r25, Z
    15fa:	81 81       	ldd	r24, Z+1	; 0x01
    15fc:	eb ec       	ldi	r30, 0xCB	; 203
    15fe:	f2 e5       	ldi	r31, 0x52	; 82
    1600:	94 87       	std	Z+12, r25	; 0x0c
    1602:	85 87       	std	Z+13, r24	; 0x0d
			trx_reg_write(RG_SHORT_ADDR_0,
    1604:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
    1608:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    160c:	80 e0       	ldi	r24, 0x00	; 0
			tal_pib.ShortAddress = value->pib_value_16bit;
			trx_reg_write(RG_SHORT_ADDR_0,
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;
    160e:	ae c0       	rjmp	.+348    	; 0x176c <tal_pib_set+0x22e>

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
    1610:	80 91 ef 52 	lds	r24, 0x52EF	; 0x8052ef <tal_state>
    1614:	81 11       	cpse	r24, r1
    1616:	8a c0       	rjmp	.+276    	; 0x172c <tal_pib_set+0x1ee>
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
					((uint32_t)0x01 <<
					value->pib_value_8bit)) {
    1618:	88 81       	ld	r24, Y
		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	58 ef       	ldi	r21, 0xF8	; 248
    161e:	6f ef       	ldi	r22, 0xFF	; 255
    1620:	77 e0       	ldi	r23, 0x07	; 7
    1622:	08 2e       	mov	r0, r24
    1624:	04 c0       	rjmp	.+8      	; 0x162e <tal_pib_set+0xf0>
    1626:	76 95       	lsr	r23
    1628:	67 95       	ror	r22
    162a:	57 95       	ror	r21
    162c:	47 95       	ror	r20
    162e:	0a 94       	dec	r0
    1630:	d2 f7       	brpl	.-12     	; 0x1626 <tal_pib_set+0xe8>
    1632:	40 ff       	sbrs	r20, 0
    1634:	7d c0       	rjmp	.+250    	; 0x1730 <tal_pib_set+0x1f2>

				/*
				 * Set trx to "soft" off avoiding that ongoing
				 * transaction (e.g. ACK) are interrupted.
				 */
				if (tal_trx_status != TRX_OFF) {
    1636:	98 30       	cpi	r25, 0x08	; 8
    1638:	09 f4       	brne	.+2      	; 0x163c <tal_pib_set+0xfe>
    163a:	80 c0       	rjmp	.+256    	; 0x173c <tal_pib_set+0x1fe>
					                                   **/
					do {
						/* set TRX_OFF until it could be
						 * set;
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
    163c:	88 e0       	ldi	r24, 0x08	; 8
    163e:	6d da       	rcall	.-2854   	; 0xb1a <set_trx_state>
							TRX_OFF);
    1640:	88 30       	cpi	r24, 0x08	; 8
    1642:	e1 f7       	brne	.-8      	; 0x163c <tal_pib_set+0xfe>
    1644:	86 c0       	rjmp	.+268    	; 0x1752 <tal_pib_set+0x214>
					return MAC_INVALID_PARAMETER;
				}
			}

#else
			if (tal_state != TAL_IDLE) {
    1646:	80 91 ef 52 	lds	r24, 0x52EF	; 0x8052ef <tal_state>
    164a:	81 11       	cpse	r24, r1
    164c:	73 c0       	rjmp	.+230    	; 0x1734 <tal_pib_set+0x1f6>
				return TAL_BUSY;
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
    164e:	88 81       	ld	r24, Y
    1650:	81 11       	cpse	r24, r1
    1652:	72 c0       	rjmp	.+228    	; 0x1738 <tal_pib_set+0x1fa>
    1654:	8b c0       	rjmp	.+278    	; 0x176c <tal_pib_set+0x22e>
			}
#endif  /* #ifdef HIGH_DATA_RATE_SUPPORT */
			break;

		case macMaxBE:
			tal_pib.MaxBE = value->pib_value_8bit;
    1656:	fb 01       	movw	r30, r22
    1658:	90 81       	ld	r25, Z
    165a:	eb ec       	ldi	r30, 0xCB	; 203
    165c:	f2 e5       	ldi	r31, 0x52	; 82
    165e:	93 8f       	std	Z+27, r25	; 0x1b
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MaxBE < tal_pib.MinBE) {
    1660:	85 89       	ldd	r24, Z+21	; 0x15
    1662:	98 17       	cp	r25, r24
    1664:	10 f4       	brcc	.+4      	; 0x166a <tal_pib_set+0x12c>
				tal_pib.MinBE = tal_pib.MaxBE;
    1666:	90 93 e0 52 	sts	0x52E0, r25	; 0x8052e0 <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    166a:	ef e6       	ldi	r30, 0x6F	; 111
    166c:	f1 e0       	ldi	r31, 0x01	; 1
    166e:	80 81       	ld	r24, Z
    1670:	28 2f       	mov	r18, r24
    1672:	2f 70       	andi	r18, 0x0F	; 15
    1674:	30 e1       	ldi	r19, 0x10	; 16
    1676:	93 9f       	mul	r25, r19
    1678:	c0 01       	movw	r24, r0
    167a:	11 24       	eor	r1, r1
    167c:	82 2b       	or	r24, r18
    167e:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1680:	80 e0       	ldi	r24, 0x00	; 0
			if (tal_pib.MaxBE < tal_pib.MinBE) {
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
			break;
    1682:	74 c0       	rjmp	.+232    	; 0x176c <tal_pib_set+0x22e>

		case phyTransmitPower:
		{
			uint8_t reg_value;

			tal_pib.TransmitPower = value->pib_value_8bit;
    1684:	88 81       	ld	r24, Y
    1686:	cb ec       	ldi	r28, 0xCB	; 203
    1688:	d2 e5       	ldi	r29, 0x52	; 82

			/* Limit tal_pib.TransmitPower to max/min trx values */
			tal_pib.TransmitPower = limit_tx_pwr(
    168a:	8f 8b       	std	Y+23, r24	; 0x17
    168c:	7f de       	rcall	.-770    	; 0x138c <limit_tx_pwr>
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
    168e:	8f 8b       	std	Y+23, r24	; 0x17
    1690:	da de       	rcall	.-588    	; 0x1446 <convert_phyTransmitPower_to_reg_value>
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
    1692:	e5 e4       	ldi	r30, 0x45	; 69
    1694:	f1 e0       	ldi	r31, 0x01	; 1
    1696:	90 81       	ld	r25, Z
    1698:	90 7f       	andi	r25, 0xF0	; 240
    169a:	8f 70       	andi	r24, 0x0F	; 15
    169c:	89 2b       	or	r24, r25
    169e:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    16a0:	80 e0       	ldi	r24, 0x00	; 0
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
		}
		break;
    16a2:	64 c0       	rjmp	.+200    	; 0x176c <tal_pib_set+0x22e>

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
    16a4:	88 81       	ld	r24, Y
    16a6:	80 93 dd 52 	sts	0x52DD, r24	; 0x8052dd <tal_pib+0x12>
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    16aa:	e8 e4       	ldi	r30, 0x48	; 72
    16ac:	f1 e0       	ldi	r31, 0x01	; 1
    16ae:	20 81       	ld	r18, Z
    16b0:	30 e2       	ldi	r19, 0x20	; 32
    16b2:	83 9f       	mul	r24, r19
    16b4:	c0 01       	movw	r24, r0
    16b6:	11 24       	eor	r1, r1
    16b8:	80 76       	andi	r24, 0x60	; 96
    16ba:	92 2f       	mov	r25, r18
    16bc:	9f 79       	andi	r25, 0x9F	; 159
    16be:	89 2b       	or	r24, r25
    16c0:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    16c2:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
			break;
    16c4:	53 c0       	rjmp	.+166    	; 0x176c <tal_pib_set+0x22e>

		case macIeeeAddress:
		{
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
    16c6:	fb 01       	movw	r30, r22
    16c8:	b0 81       	ld	r27, Z
    16ca:	a1 81       	ldd	r26, Z+1	; 0x01
    16cc:	52 81       	ldd	r21, Z+2	; 0x02
    16ce:	43 81       	ldd	r20, Z+3	; 0x03
    16d0:	34 81       	ldd	r19, Z+4	; 0x04
    16d2:	25 81       	ldd	r18, Z+5	; 0x05
    16d4:	96 81       	ldd	r25, Z+6	; 0x06
    16d6:	87 81       	ldd	r24, Z+7	; 0x07
    16d8:	eb ec       	ldi	r30, 0xCB	; 203
    16da:	f2 e5       	ldi	r31, 0x52	; 82
    16dc:	b0 83       	st	Z, r27
    16de:	a1 83       	std	Z+1, r26	; 0x01
    16e0:	52 83       	std	Z+2, r21	; 0x02
    16e2:	43 83       	std	Z+3, r20	; 0x03
    16e4:	34 83       	std	Z+4, r19	; 0x04
    16e6:	25 83       	std	Z+5, r18	; 0x05
    16e8:	96 83       	std	Z+6, r25	; 0x06
    16ea:	87 83       	std	Z+7, r24	; 0x07
    16ec:	e4 e6       	ldi	r30, 0x64	; 100
    16ee:	f1 e0       	ldi	r31, 0x01	; 1
			ptr = (uint8_t *)&tal_pib.IeeeAddress;
    16f0:	ab ec       	ldi	r26, 0xCB	; 203
    16f2:	b2 e5       	ldi	r27, 0x52	; 82

			for (uint8_t i = 0; i < 8; i++) {
				trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr);
    16f4:	8d 91       	ld	r24, X+
    16f6:	81 93       	st	Z+, r24
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
			ptr = (uint8_t *)&tal_pib.IeeeAddress;

			for (uint8_t i = 0; i < 8; i++) {
    16f8:	ec 36       	cpi	r30, 0x6C	; 108
    16fa:	31 e0       	ldi	r19, 0x01	; 1
    16fc:	f3 07       	cpc	r31, r19
    16fe:	d1 f7       	brne	.-12     	; 0x16f4 <tal_pib_set+0x1b6>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	34 c0       	rjmp	.+104    	; 0x176c <tal_pib_set+0x22e>
			}
		}
		break;

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    1704:	fb 01       	movw	r30, r22
    1706:	80 81       	ld	r24, Z
    1708:	80 93 e1 52 	sts	0x52E1, r24	; 0x8052e1 <tal_pib+0x16>
			trx_bit_write(SR_AACK_I_AM_COORD,
    170c:	ee e6       	ldi	r30, 0x6E	; 110
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	90 81       	ld	r25, Z
    1712:	88 0f       	add	r24, r24
    1714:	88 0f       	add	r24, r24
    1716:	88 0f       	add	r24, r24
    1718:	88 70       	andi	r24, 0x08	; 8
    171a:	97 7f       	andi	r25, 0xF7	; 247
    171c:	89 2b       	or	r24, r25
    171e:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1720:	80 e0       	ldi	r24, 0x00	; 0

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
			trx_bit_write(SR_AACK_I_AM_COORD,
					tal_pib.PrivatePanCoordinator);
			break;
    1722:	24 c0       	rjmp	.+72     	; 0x176c <tal_pib_set+0x22e>
		 */

		if (tal_trx_status == TRX_SLEEP) {
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
    1724:	81 e8       	ldi	r24, 0x81	; 129
    1726:	22 c0       	rjmp	.+68     	; 0x176c <tal_pib_set+0x22e>
			 * w.r.t.
			 * compliance operation.
			 * The ACK timing can be reduced to 2 symbols using TFA
			 * function.
			 */
			return MAC_UNSUPPORTED_ATTRIBUTE;
    1728:	84 ef       	ldi	r24, 0xF4	; 244
    172a:	20 c0       	rjmp	.+64     	; 0x176c <tal_pib_set+0x22e>
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    172c:	86 e8       	ldi	r24, 0x86	; 134
    172e:	1e c0       	rjmp	.+60     	; 0x176c <tal_pib_set+0x22e>
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
				}
			} else {
				return MAC_INVALID_PARAMETER;
    1730:	88 ee       	ldi	r24, 0xE8	; 232
    1732:	1c c0       	rjmp	.+56     	; 0x176c <tal_pib_set+0x22e>
				}
			}

#else
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    1734:	86 e8       	ldi	r24, 0x86	; 134
    1736:	1a c0       	rjmp	.+52     	; 0x176c <tal_pib_set+0x22e>
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
					return MAC_INVALID_PARAMETER;
    1738:	88 ee       	ldi	r24, 0xE8	; 232
    173a:	18 c0       	rjmp	.+48     	; 0x176c <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    173c:	80 93 de 52 	sts	0x52DE, r24	; 0x8052de <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    1740:	e8 e4       	ldi	r30, 0x48	; 72
    1742:	f1 e0       	ldi	r31, 0x01	; 1
    1744:	90 81       	ld	r25, Z
    1746:	90 7e       	andi	r25, 0xE0	; 224
    1748:	8f 71       	andi	r24, 0x1F	; 31
    174a:	89 2b       	or	r24, r25
    174c:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	0d c0       	rjmp	.+26     	; 0x176c <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    1752:	88 81       	ld	r24, Y
    1754:	80 93 de 52 	sts	0x52DE, r24	; 0x8052de <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    1758:	e8 e4       	ldi	r30, 0x48	; 72
    175a:	f1 e0       	ldi	r31, 0x01	; 1
    175c:	90 81       	ld	r25, Z
    175e:	90 7e       	andi	r25, 0xE0	; 224
    1760:	8f 71       	andi	r24, 0x1F	; 31
    1762:	89 2b       	or	r24, r25
						tal_pib.CurrentChannel);
				/* Re-store previous trx state */
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
    1764:	80 83       	st	Z, r24
    1766:	86 e1       	ldi	r24, 0x16	; 22
    1768:	d8 d9       	rcall	.-3152   	; 0xb1a <set_trx_state>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    176a:	80 e0       	ldi	r24, 0x00	; 0
} /* tal_pib_set() */
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1772:	04 c0       	rjmp	.+8      	; 0x177c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1774:	61 50       	subi	r22, 0x01	; 1
    1776:	71 09       	sbc	r23, r1
    1778:	81 09       	sbc	r24, r1
    177a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    177c:	61 15       	cp	r22, r1
    177e:	71 05       	cpc	r23, r1
    1780:	81 05       	cpc	r24, r1
    1782:	91 05       	cpc	r25, r1
    1784:	b9 f7       	brne	.-18     	; 0x1774 <__portable_avr_delay_cycles+0x2>
    1786:	08 95       	ret

00001788 <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    1798:	e0 91 c8 03 	lds	r30, 0x03C8	; 0x8003c8 <tal_rx_buffer>
    179c:	f0 91 c9 03 	lds	r31, 0x03C9	; 0x8003c9 <tal_rx_buffer+0x1>
    17a0:	30 97       	sbiw	r30, 0x00	; 0
    17a2:	71 f4       	brne	.+28     	; 0x17c0 <handle_received_frame_irq+0x38>
		 * Although the buffer protection mode is enabled and the
		 * receiver has
		 * been switched to PLL_ON, the next incoming frame was faster.
		 * It cannot be handled and is discarded.
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    17a4:	cc e4       	ldi	r28, 0x4C	; 76
    17a6:	d1 e0       	ldi	r29, 0x01	; 1
    17a8:	88 81       	ld	r24, Y
    17aa:	8f 77       	andi	r24, 0x7F	; 127
    17ac:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    17ae:	63 e0       	ldi	r22, 0x03	; 3
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	dd df       	rcall	.-70     	; 0x1772 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    17b8:	88 81       	ld	r24, Y
    17ba:	80 68       	ori	r24, 0x80	; 128
    17bc:	88 83       	st	Y, r24
		                                                      *
		                                                      *
		                                                      *protection
		                                                      * mode
		                                                      **/
		return;
    17be:	48 c0       	rjmp	.+144    	; 0x1850 <handle_received_frame_irq+0xc8>
		}
	}
#endif

	/* Get ED value; needed to normalize LQI. */
	ed_value = trx_reg_read(RG_PHY_ED_LEVEL);
    17c0:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>

	/* Get frame length from transceiver. */
	phy_frame_len = ext_frame_length = trx_reg_read(RG_TST_RX_LENGTH);
    17c4:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    17c8:	11 23       	and	r17, r17
    17ca:	0c f4       	brge	.+2      	; 0x17ce <handle_received_frame_irq+0x46>
    17cc:	41 c0       	rjmp	.+130    	; 0x1850 <handle_received_frame_irq+0xc8>
		                                                      * mode
		                                                      **/
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    17ce:	e0 80       	ld	r14, Z
    17d0:	f1 80       	ldd	r15, Z+1	; 0x01
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length += LQI_LEN + ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	81 0f       	add	r24, r17
    17d6:	eb e8       	ldi	r30, 0x8B	; 139
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	e8 1b       	sub	r30, r24
    17dc:	f1 09       	sbc	r31, r1
    17de:	e7 01       	movw	r28, r14
    17e0:	ce 0f       	add	r28, r30
    17e2:	df 1f       	adc	r29, r31
	 * Note: The following code is different from other non-single chip
	 * transceivers, where reading the frame via SPI contains the length
	 * field
	 * in the first octet.
	 */
	trx_frame_read(frame_ptr, phy_frame_len + LQI_LEN);
    17e4:	c1 2e       	mov	r12, r17
    17e6:	d1 2c       	mov	r13, r1
    17e8:	a6 01       	movw	r20, r12
    17ea:	4f 5f       	subi	r20, 0xFF	; 255
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    17ee:	60 e8       	ldi	r22, 0x80	; 128
    17f0:	71 e0       	ldi	r23, 0x01	; 1
    17f2:	ce 01       	movw	r24, r28
    17f4:	bc d6       	rcall	.+3448   	; 0x256e <memcpy>
	frame_ptr--;
    17f6:	fe 01       	movw	r30, r28
	*frame_ptr = phy_frame_len;
    17f8:	12 93       	st	-Z, r17
	receive_frame->mpdu = frame_ptr;
    17fa:	d7 01       	movw	r26, r14
    17fc:	18 96       	adiw	r26, 0x08	; 8
    17fe:	fc 93       	st	X, r31
    1800:	ee 93       	st	-X, r30
    1802:	17 97       	sbiw	r26, 0x07	; 7
	/* Add ED value at the end of the frame buffer. */
	receive_frame->mpdu[phy_frame_len + LQI_LEN + ED_VAL_LEN] = ed_value;
    1804:	ec 0d       	add	r30, r12
    1806:	fd 1d       	adc	r31, r13
    1808:	02 83       	std	Z+2, r16	; 0x02
	receive_frame->time_stamp = tal_rx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    180a:	60 91 c8 03 	lds	r22, 0x03C8	; 0x8003c8 <tal_rx_buffer>
    180e:	70 91 c9 03 	lds	r23, 0x03C9	; 0x8003c9 <tal_rx_buffer+0x1>
    1812:	84 ec       	ldi	r24, 0xC4	; 196
    1814:	92 e5       	ldi	r25, 0x52	; 82

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1816:	2d d9       	rcall	.-3494   	; 0xa72 <qmm_queue_append>
    1818:	8b e8       	ldi	r24, 0x8B	; 139
    181a:	93 d8       	rcall	.-3802   	; 0x942 <bmm_buffer_alloc>
    181c:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <tal_rx_buffer+0x1>
    1820:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <tal_rx_buffer>

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    1824:	89 2b       	or	r24, r25
    1826:	21 f4       	brne	.+8      	; 0x1830 <handle_received_frame_irq+0xa8>
		 * re-enabled yet.
		 * Buffer protection will be re-enabled after buffer becomes
		 * available
		 */
		/* set_trx_state(CMD_PLL_ON); */
		tal_rx_on_required = true;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	80 93 c3 52 	sts	0x52C3, r24	; 0x8052c3 <tal_rx_on_required>
    182e:	0d c0       	rjmp	.+26     	; 0x184a <handle_received_frame_irq+0xc2>
		/*
		 * Release the protected buffer and set it again for further
		 * protection since
		 * the buffer is available
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    1830:	cc e4       	ldi	r28, 0x4C	; 76
    1832:	d1 e0       	ldi	r29, 0x01	; 1
    1834:	88 81       	ld	r24, Y
    1836:	8f 77       	andi	r24, 0x7F	; 127
    1838:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    183a:	63 e0       	ldi	r22, 0x03	; 3
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	97 df       	rcall	.-210    	; 0x1772 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1844:	88 81       	ld	r24, Y
    1846:	80 68       	ori	r24, 0x80	; 128
    1848:	88 83       	st	Y, r24
	 * transmission
	 * end of an automatically sent ACK frame. This implementation does not
	 * use
	 * this feature.
	 */
	pal_trx_irq_flag_clr_tx_end();
    184a:	80 e4       	ldi	r24, 0x40	; 64
    184c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	08 95       	ret

00001862 <process_incoming_frame>:
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	ac 01       	movw	r20, r24
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    1868:	fc 01       	movw	r30, r24
    186a:	c0 81       	ld	r28, Z
    186c:	d1 81       	ldd	r29, Z+1	; 0x01

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    186e:	af 81       	ldd	r26, Y+7	; 0x07
    1870:	b8 85       	ldd	r27, Y+8	; 0x08
    1872:	8c 91       	ld	r24, X
    1874:	80 93 eb 52 	sts	0x52EB, r24	; 0x8052eb <last_frame_length>

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    1878:	e8 2f       	mov	r30, r24
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	31 96       	adiw	r30, 0x01	; 1
    187e:	ea 0f       	add	r30, r26
    1880:	fb 1f       	adc	r31, r27
	lqi = *frame_ptr++;
    1882:	80 81       	ld	r24, Z
	ed_level = *frame_ptr;
    1884:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
    1886:	3d 33       	cpi	r19, 0x3D	; 61
    1888:	20 f4       	brcc	.+8      	; 0x1892 <process_incoming_frame+0x30>
		ed_value = ED_MAX_VAL;
	} else if (ed_value == 0) {
    188a:	31 11       	cpse	r19, r1
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <process_incoming_frame+0x32>
		ed_value = 1;
    188e:	31 e0       	ldi	r19, 0x01	; 1
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <process_incoming_frame+0x32>

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
		ed_value = ED_MAX_VAL;
    1892:	3c e3       	ldi	r19, 0x3C	; 60
	} else if (ed_value == 0) {
		ed_value = 1;
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    1894:	82 95       	swap	r24
    1896:	86 95       	lsr	r24
    1898:	86 95       	lsr	r24
    189a:	83 70       	andi	r24, 0x03	; 3
    189c:	2f ef       	ldi	r18, 0xFF	; 255
    189e:	82 9f       	mul	r24, r18
    18a0:	c0 01       	movw	r24, r0
    18a2:	11 24       	eor	r1, r1
    18a4:	38 9f       	mul	r19, r24
    18a6:	b0 01       	movw	r22, r0
    18a8:	39 9f       	mul	r19, r25
    18aa:	70 0d       	add	r23, r0
    18ac:	11 24       	eor	r1, r1
    18ae:	9b 01       	movw	r18, r22
    18b0:	a3 e8       	ldi	r26, 0x83	; 131
    18b2:	bd e2       	ldi	r27, 0x2D	; 45
    18b4:	d6 d5       	rcall	.+2988   	; 0x2462 <__umulhisi3>
    18b6:	96 95       	lsr	r25
    18b8:	87 95       	ror	r24
    18ba:	92 95       	swap	r25
    18bc:	82 95       	swap	r24
    18be:	8f 70       	andi	r24, 0x0F	; 15
    18c0:	89 27       	eor	r24, r25
    18c2:	9f 70       	andi	r25, 0x0F	; 15
    18c4:	89 27       	eor	r24, r25
			(ED_MAX_VAL * LQI_MAX);

	if (link_quality > 255) {
    18c6:	8f 3f       	cpi	r24, 0xFF	; 255
    18c8:	91 05       	cpc	r25, r1
    18ca:	11 f0       	breq	.+4      	; 0x18d0 <process_incoming_frame+0x6e>
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <process_incoming_frame+0x6e>
		return 255;
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
	lqi = normalize_lqi(lqi, ed_level);
#endif

	/* Store normalized LQI value again. */
	frame_ptr--;
	*frame_ptr = lqi;
    18d0:	80 83       	st	Z, r24
#endif  /* #ifndef TRX_REG_RAW_VALUE */

	receive_frame->buffer_header = buf_ptr;
    18d2:	5a 83       	std	Y+2, r21	; 0x02
    18d4:	49 83       	std	Y+1, r20	; 0x01
#ifdef ENABLE_RTB
	/* The callback function implemented by RTB is invoked. */
	rtb_rx_frame_cb(receive_frame);
#else
	/* The callback function implemented by MAC is invoked. */
	tal_rx_frame_cb(receive_frame);
    18d6:	ce 01       	movw	r24, r28
    18d8:	7a d5       	rcall	.+2804   	; 0x23ce <tal_rx_frame_cb>
#endif
} /* process_incoming_frame() */
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <tal_rx_enable>:
{
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    18e0:	90 91 ef 52 	lds	r25, 0x52EF	; 0x8052ef <tal_state>
    18e4:	91 11       	cpse	r25, r1
    18e6:	16 c0       	rjmp	.+44     	; 0x1914 <tal_rx_enable+0x34>
#else
		return TAL_BUSY;
#endif
	}

	if (state == PHY_TRX_OFF) {
    18e8:	88 30       	cpi	r24, 0x08	; 8
    18ea:	29 f4       	brne	.+10     	; 0x18f6 <tal_rx_enable+0x16>
		 * that is currently being received.
		 * This must not be a Forced TRX_OFF (CMD_FORCED_TRX_OFF) since
		 * this could
		 * corrupt an already outoing ACK frame.
		 */
		set_trx_state(CMD_TRX_OFF);
    18ec:	16 d9       	rcall	.-3540   	; 0xb1a <set_trx_state>
		tal_rx_on_required = false;
    18ee:	10 92 c3 52 	sts	0x52C3, r1	; 0x8052c3 <tal_rx_on_required>
		return TRX_OFF;
    18f2:	88 e0       	ldi	r24, 0x08	; 8
    18f4:	08 95       	ret
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    18f6:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tal_rx_buffer>
    18fa:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tal_rx_buffer+0x1>
    18fe:	89 2b       	or	r24, r25
    1900:	21 f0       	breq	.+8      	; 0x190a <tal_rx_enable+0x2a>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    1902:	86 e1       	ldi	r24, 0x16	; 22
    1904:	0a d9       	rcall	.-3564   	; 0xb1a <set_trx_state>
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    1906:	86 e0       	ldi	r24, 0x06	; 6
    1908:	08 95       	ret
			 * the TAL returns MAC_SUCCESS. The TAL will try to
			 * allocate a receive
			 * buffer as soon as possible and will switch on the
			 * receiver.
			 */
			tal_rx_on_required = true;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	80 93 c3 52 	sts	0x52C3, r24	; 0x8052c3 <tal_rx_on_required>
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    1910:	86 e0       	ldi	r24, 0x06	; 6
    1912:	08 95       	ret
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    1914:	86 e8       	ldi	r24, 0x86	; 134
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
	}
}
    1916:	08 95       	ret

00001918 <tx_done_handling>:
#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
}
    1918:	10 92 ef 52 	sts	0x52EF, r1	; 0x8052ef <tal_state>
    191c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <trx_trac_status>
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	69 f0       	breq	.+26     	; 0x193e <tx_done_handling+0x26>
    1924:	28 f4       	brcc	.+10     	; 0x1930 <tx_done_handling+0x18>
    1926:	88 23       	and	r24, r24
    1928:	91 f0       	breq	.+36     	; 0x194e <tx_done_handling+0x36>
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	31 f0       	breq	.+12     	; 0x193a <tx_done_handling+0x22>
    192e:	0d c0       	rjmp	.+26     	; 0x194a <tx_done_handling+0x32>
    1930:	85 30       	cpi	r24, 0x05	; 5
    1932:	39 f0       	breq	.+14     	; 0x1942 <tx_done_handling+0x2a>
    1934:	87 30       	cpi	r24, 0x07	; 7
    1936:	39 f0       	breq	.+14     	; 0x1946 <tx_done_handling+0x2e>
    1938:	08 c0       	rjmp	.+16     	; 0x194a <tx_done_handling+0x32>
    193a:	87 e8       	ldi	r24, 0x87	; 135
    193c:	09 c0       	rjmp	.+18     	; 0x1950 <tx_done_handling+0x38>
    193e:	81 ee       	ldi	r24, 0xE1	; 225
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <tx_done_handling+0x38>
    1942:	89 ee       	ldi	r24, 0xE9	; 233
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <tx_done_handling+0x38>
    1946:	85 e8       	ldi	r24, 0x85	; 133
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <tx_done_handling+0x38>
    194a:	85 e8       	ldi	r24, 0x85	; 133
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <tx_done_handling+0x38>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	60 91 c9 52 	lds	r22, 0x52C9	; 0x8052c9 <mac_frame_ptr>
    1954:	70 91 ca 52 	lds	r23, 0x52CA	; 0x8052ca <mac_frame_ptr+0x1>
    1958:	37 c5       	rjmp	.+2670   	; 0x23c8 <tal_tx_frame_done_cb>
    195a:	08 95       	ret

0000195c <handle_tx_end_irq>:
	/* Check if TX_END interrupt, is issued due to automatic ACK
	 * transmission. */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	if ((tal_state != TAL_TX_AUTO) && (!tal_beacon_transmission))
#else
	if (tal_state != TAL_TX_AUTO)
    195c:	80 91 ef 52 	lds	r24, 0x52EF	; 0x8052ef <tal_state>
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	c1 f4       	brne	.+48     	; 0x1994 <handle_tx_end_irq+0x38>
		}
	} else
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */
	{
		/* Read trac status before enabling RX_AACK_ON. */
		trx_trac_status = (trx_trac_status_t)trx_bit_read(
    1964:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1968:	82 95       	swap	r24
    196a:	86 95       	lsr	r24
    196c:	87 70       	andi	r24, 0x07	; 7
    196e:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <trx_trac_status>
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			tal_state = TAL_TX_DONE; /* Further handling is done by
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	80 93 ef 52 	sts	0x52EF, r24	; 0x8052ef <tal_state>

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    1978:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tal_rx_buffer>
    197c:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tal_rx_buffer+0x1>
    1980:	89 2b       	or	r24, r25
    1982:	31 f4       	brne	.+12     	; 0x1990 <handle_tx_end_irq+0x34>
		set_trx_state(CMD_PLL_ON);
    1984:	89 e0       	ldi	r24, 0x09	; 9
    1986:	c9 d8       	rcall	.-3694   	; 0xb1a <set_trx_state>
		tal_rx_on_required = true;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	80 93 c3 52 	sts	0x52C3, r24	; 0x8052c3 <tal_rx_on_required>
    198e:	08 95       	ret
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    1990:	86 e1       	ldi	r24, 0x16	; 22
    1992:	c3 c8       	rjmp	.-3706   	; 0xb1a <set_trx_state>
    1994:	08 95       	ret

00001996 <tal_ant_div_config>:
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
	if (true == div_ctrl) {
    1996:	88 23       	and	r24, r24
    1998:	29 f1       	breq	.+74     	; 0x19e4 <tal_ant_div_config+0x4e>
		/* do the configurations if diversity has to be enabled */
		trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    199a:	ed e4       	ldi	r30, 0x4D	; 77
    199c:	f1 e0       	ldi	r31, 0x01	; 1
    199e:	80 81       	ld	r24, Z
    19a0:	8c 7f       	andi	r24, 0xFC	; 252
    19a2:	80 83       	st	Z, r24
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    19a4:	80 81       	ld	r24, Z
    19a6:	88 60       	ori	r24, 0x08	; 8
    19a8:	80 83       	st	Z, r24

#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    19aa:	aa e4       	ldi	r26, 0x4A	; 74
    19ac:	b1 e0       	ldi	r27, 0x01	; 1
    19ae:	8c 91       	ld	r24, X
    19b0:	80 7f       	andi	r24, 0xF0	; 240
    19b2:	83 60       	ori	r24, 0x03	; 3
    19b4:	8c 93       	st	X, r24
#endif /* End of ((TAL_TYPE != AT86RF212) && (TAL_TYPE!= AT86RF212B)) */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    19b6:	80 81       	ld	r24, Z
    19b8:	84 60       	ori	r24, 0x04	; 4
    19ba:	80 83       	st	Z, r24
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    19bc:	80 81       	ld	r24, Z
    19be:	83 70       	andi	r24, 0x03	; 3
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <tal_ant_div_config+0x2e>
    19c2:	54 c0       	rjmp	.+168    	; 0x1a6c <tal_ant_div_config+0xd6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    19c4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    19c8:	83 ff       	sbrs	r24, 3
    19ca:	52 c0       	rjmp	.+164    	; 0x1a70 <tal_ant_div_config+0xda>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    19cc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
    19d0:	82 ff       	sbrs	r24, 2
    19d2:	50 c0       	rjmp	.+160    	; 0x1a74 <tal_ant_div_config+0xde>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_ENABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    19d4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    19d8:	8f 70       	andi	r24, 0x0F	; 15
    19da:	83 30       	cpi	r24, 0x03	; 3
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <tal_ant_div_config+0x4a>
    19de:	4c c0       	rjmp	.+152    	; 0x1a78 <tal_ant_div_config+0xe2>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	08 95       	ret
		} else {
			return_var = FAILURE;
		}
	} else {
		/* do the configurations if diversity has to be disabled */
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_DISABLE);
    19e4:	ed e4       	ldi	r30, 0x4D	; 77
    19e6:	f1 e0       	ldi	r31, 0x01	; 1
    19e8:	80 81       	ld	r24, Z
    19ea:	87 7f       	andi	r24, 0xF7	; 247
    19ec:	80 83       	st	Z, r24
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_DISABLE);
    19ee:	aa e4       	ldi	r26, 0x4A	; 74
    19f0:	b1 e0       	ldi	r27, 0x01	; 1
    19f2:	8c 91       	ld	r24, X
    19f4:	80 7f       	andi	r24, 0xF0	; 240
    19f6:	87 60       	ori	r24, 0x07	; 7
    19f8:	8c 93       	st	X, r24
#endif

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    19fa:	80 81       	ld	r24, Z
    19fc:	84 60       	ori	r24, 0x04	; 4
    19fe:	80 83       	st	Z, r24
		if (ant_ctrl == ANT_CTRL_1) {
    1a00:	61 30       	cpi	r22, 0x01	; 1
    1a02:	31 f4       	brne	.+12     	; 0x1a10 <tal_ant_div_config+0x7a>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
    1a04:	80 81       	ld	r24, Z
    1a06:	8c 7f       	andi	r24, 0xFC	; 252
    1a08:	81 60       	ori	r24, 0x01	; 1
    1a0a:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1a0c:	85 e8       	ldi	r24, 0x85	; 133
    1a0e:	17 c0       	rjmp	.+46     	; 0x1a3e <tal_ant_div_config+0xa8>

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
		if (ant_ctrl == ANT_CTRL_1) {
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
    1a10:	62 30       	cpi	r22, 0x02	; 2
    1a12:	41 f4       	brne	.+16     	; 0x1a24 <tal_ant_div_config+0x8e>
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
    1a14:	ed e4       	ldi	r30, 0x4D	; 77
    1a16:	f1 e0       	ldi	r31, 0x01	; 1
    1a18:	80 81       	ld	r24, Z
    1a1a:	8c 7f       	andi	r24, 0xFC	; 252
    1a1c:	82 60       	ori	r24, 0x02	; 2
    1a1e:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1a20:	85 e8       	ldi	r24, 0x85	; 133
    1a22:	0d c0       	rjmp	.+26     	; 0x1a3e <tal_ant_div_config+0xa8>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
    1a24:	66 23       	and	r22, r22
    1a26:	11 f0       	breq	.+4      	; 0x1a2c <tal_ant_div_config+0x96>
    1a28:	63 30       	cpi	r22, 0x03	; 3
    1a2a:	41 f4       	brne	.+16     	; 0x1a3c <tal_ant_div_config+0xa6>
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    1a2c:	ed e4       	ldi	r30, 0x4D	; 77
    1a2e:	f1 e0       	ldi	r31, 0x01	; 1
    1a30:	80 81       	ld	r24, Z
    1a32:	8c 7f       	andi	r24, 0xFC	; 252
    1a34:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1a36:	85 e8       	ldi	r24, 0x85	; 133
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
			ant_ctrl = 0;
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <tal_ant_div_config+0xa8>
		} else {
			return_var = MAC_INVALID_PARAMETER;
    1a3c:	88 ee       	ldi	r24, 0xE8	; 232

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    1a3e:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
    1a42:	23 70       	andi	r18, 0x03	; 3
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	26 17       	cp	r18, r22
    1a4a:	37 07       	cpc	r19, r23
    1a4c:	b9 f4       	brne	.+46     	; 0x1a7c <tal_ant_div_config+0xe6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    1a4e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    1a52:	93 fd       	sbrc	r25, 3
    1a54:	15 c0       	rjmp	.+42     	; 0x1a80 <tal_ant_div_config+0xea>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    1a56:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
    1a5a:	92 fd       	sbrc	r25, 2
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <tal_ant_div_config+0xee>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_DISABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    1a5e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    1a62:	9f 70       	andi	r25, 0x0F	; 15
    1a64:	93 30       	cpi	r25, 0x03	; 3
    1a66:	79 f4       	brne	.+30     	; 0x1a86 <tal_ant_div_config+0xf0>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    1a6c:	85 e8       	ldi	r24, 0x85	; 133
    1a6e:	08 95       	ret
    1a70:	85 e8       	ldi	r24, 0x85	; 133
    1a72:	08 95       	ret
    1a74:	85 e8       	ldi	r24, 0x85	; 133
    1a76:	08 95       	ret
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1a78:	85 e8       	ldi	r24, 0x85	; 133
    1a7a:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    1a7c:	85 e8       	ldi	r24, 0x85	; 133
    1a7e:	08 95       	ret
    1a80:	85 e8       	ldi	r24, 0x85	; 133
    1a82:	08 95       	ret
    1a84:	85 e8       	ldi	r24, 0x85	; 133
		}
	}

	return return_var;
}
    1a86:	08 95       	ret

00001a88 <tfa_pib_set>:
 *         TAL_BUSY if the TAL is not in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 */
retval_t tfa_pib_set(tfa_pib_t tfa_pib_attribute, void *value)
{
	switch (tfa_pib_attribute) {
    1a88:	81 11       	cpse	r24, r1
    1a8a:	24 c0       	rjmp	.+72     	; 0x1ad4 <tfa_pib_set+0x4c>
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    1a8c:	fb 01       	movw	r30, r22
    1a8e:	80 81       	ld	r24, Z
		if (tfa_pib_rx_sens > -49) {
    1a90:	80 3d       	cpi	r24, 0xD0	; 208
    1a92:	2c f0       	brlt	.+10     	; 0x1a9e <tfa_pib_set+0x16>
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
    1a94:	8f ec       	ldi	r24, 0xCF	; 207
    1a96:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <tfa_pib_rx_sens>
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
    1a9a:	6f e0       	ldi	r22, 0x0F	; 15
    1a9c:	12 c0       	rjmp	.+36     	; 0x1ac2 <tfa_pib_set+0x3a>
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
    1a9e:	87 3a       	cpi	r24, 0xA7	; 167
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <tfa_pib_set+0x24>
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
    1aa2:	86 ea       	ldi	r24, 0xA6	; 166
    1aa4:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <tfa_pib_rx_sens>
		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	0b c0       	rjmp	.+22     	; 0x1ac2 <tfa_pib_set+0x3a>
	switch (tfa_pib_attribute) {
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    1aac:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <tfa_pib_rx_sens>
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
		} else {
			reg_val
				= ((tfa_pib_rx_sens -
    1ab0:	08 2e       	mov	r0, r24
    1ab2:	00 0c       	add	r0, r0
    1ab4:	99 0b       	sbc	r25, r25
    1ab6:	86 5a       	subi	r24, 0xA6	; 166
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	63 e0       	ldi	r22, 0x03	; 3
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	b6 d4       	rcall	.+2412   	; 0x242c <__divmodhi4>
    1ac0:	6f 5f       	subi	r22, 0xFF	; 255
					(RSSI_BASE_VAL_DBM)) / 3) + 1;
		}

		trx_bit_write(SR_RX_PDT_LEVEL, reg_val);
    1ac2:	e5 e5       	ldi	r30, 0x55	; 85
    1ac4:	f1 e0       	ldi	r31, 0x01	; 1
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 7f       	andi	r24, 0xF0	; 240
    1aca:	6f 70       	andi	r22, 0x0F	; 15
    1acc:	68 2b       	or	r22, r24
    1ace:	60 83       	st	Z, r22
	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	08 95       	ret
	}
	break;

	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
    1ad4:	84 ef       	ldi	r24, 0xF4	; 244
	}

	return MAC_SUCCESS;
}
    1ad6:	08 95       	ret

00001ad8 <tfa_init>:
 * to their default values.
 * \ingroup group_tfa
 */
static void init_tfa_pib(void)
{
	tfa_pib_rx_sens = TFA_PIB_RX_SENS_DEF;
    1ad8:	86 ea       	ldi	r24, 0xA6	; 166
    1ada:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <tfa_pib_rx_sens>
 * It is assumed that the radio does not sleep.
 * \ingroup group_tfa
 */
static void write_all_tfa_pibs_to_trx(void)
{
	tfa_pib_set(TFA_PIB_RX_SENS, (void *)&tfa_pib_rx_sens);
    1ade:	63 ed       	ldi	r22, 0xD3	; 211
    1ae0:	73 e0       	ldi	r23, 0x03	; 3
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	d1 df       	rcall	.-94     	; 0x1a88 <tfa_pib_set>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    1aee:	60 e1       	ldi	r22, 0x10	; 16
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
{
	init_tfa_pib();
	write_all_tfa_pibs_to_trx();
	sysclk_enable_peripheral_clock(&ADC);
	return MAC_SUCCESS;
}
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	08 95       	ret

00001afa <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    1afa:	0c 94 9a 01 	jmp	0x334	; 0x334 <tmr_ovf_callback>
    1afe:	08 95       	ret

00001b00 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    1b00:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <tmr_cca_callback>
    1b04:	08 95       	ret

00001b06 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    1b06:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    1b0a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    1b0e:	08 95       	ret

00001b10 <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1b10:	ef e6       	ldi	r30, 0x6F	; 111
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8d 7f       	andi	r24, 0xFD	; 253
    1b18:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    1b1a:	b1 9a       	sbi	0x16, 1	; 22
    1b1c:	08 95       	ret

00001b1e <tmr_enable_cc_interrupt>:
    1b1e:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    1b20:	ef e6       	ldi	r30, 0x6F	; 111
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	82 60       	ori	r24, 0x02	; 2
    1b28:	80 83       	st	Z, r24
    1b2a:	08 95       	ret

00001b2c <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1b2c:	ef e6       	ldi	r30, 0x6F	; 111
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    1b36:	b0 9a       	sbi	0x16, 0	; 22
    1b38:	08 95       	ret

00001b3a <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    1b3a:	80 e8       	ldi	r24, 0x80	; 128
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	82 c3       	rjmp	.+1796   	; 0x2244 <tc_disable>
    1b40:	08 95       	ret

00001b42 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    1b42:	e9 e8       	ldi	r30, 0x89	; 137
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	20 81       	ld	r18, Z
    1b48:	92 2b       	or	r25, r18
    1b4a:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    1b4c:	e8 e8       	ldi	r30, 0x88	; 136
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	90 81       	ld	r25, Z
    1b52:	89 2b       	or	r24, r25
    1b54:	80 83       	st	Z, r24
    1b56:	08 95       	ret

00001b58 <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	1f 92       	push	r1
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b62:	8f b7       	in	r24, 0x3f	; 63
    1b64:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b66:	f8 94       	cli
	return flags;
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    1b6a:	0f 90       	pop	r0
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	08 95       	ret

00001b72 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b72:	8f bf       	out	0x3f, r24	; 63
    1b74:	08 95       	ret

00001b76 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    1b7a:	80 e8       	ldi	r24, 0x80	; 128
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	eb d2       	rcall	.+1494   	; 0x2156 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    1b80:	6d e7       	ldi	r22, 0x7D	; 125
    1b82:	7d e0       	ldi	r23, 0x0D	; 13
    1b84:	80 e8       	ldi	r24, 0x80	; 128
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	d4 d3       	rcall	.+1960   	; 0x2332 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1b8a:	cf e6       	ldi	r28, 0x6F	; 111
    1b8c:	d0 e0       	ldi	r29, 0x00	; 0
    1b8e:	88 81       	ld	r24, Y
    1b90:	81 60       	ori	r24, 0x01	; 1
    1b92:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    1b94:	60 e8       	ldi	r22, 0x80	; 128
    1b96:	7d e0       	ldi	r23, 0x0D	; 13
    1b98:	80 e8       	ldi	r24, 0x80	; 128
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	ea d3       	rcall	.+2004   	; 0x2372 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1b9e:	88 81       	ld	r24, Y
    1ba0:	8d 7f       	andi	r24, 0xFD	; 253
    1ba2:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    1ba4:	e1 e8       	ldi	r30, 0x81	; 129
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	81 60       	ori	r24, 0x01	; 1
    1bac:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    1bae:	88 e0       	ldi	r24, 0x08	; 8
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    1bb6:	1f 92       	push	r1
    1bb8:	0f 92       	push	r0
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	0f 92       	push	r0
    1bbe:	11 24       	eor	r1, r1
    1bc0:	0b b6       	in	r0, 0x3b	; 59
    1bc2:	0f 92       	push	r0
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	4f 93       	push	r20
    1bca:	5f 93       	push	r21
    1bcc:	6f 93       	push	r22
    1bce:	7f 93       	push	r23
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	af 93       	push	r26
    1bd6:	bf 93       	push	r27
    1bd8:	ef 93       	push	r30
    1bda:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    1bdc:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <tc_tccr1_ovf_callback>
    1be0:	f0 91 f3 03 	lds	r31, 0x03F3	; 0x8003f3 <tc_tccr1_ovf_callback+0x1>
    1be4:	30 97       	sbiw	r30, 0x00	; 0
    1be6:	09 f0       	breq	.+2      	; 0x1bea <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    1be8:	19 95       	eicall
	}
}
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	7f 91       	pop	r23
    1bf8:	6f 91       	pop	r22
    1bfa:	5f 91       	pop	r21
    1bfc:	4f 91       	pop	r20
    1bfe:	3f 91       	pop	r19
    1c00:	2f 91       	pop	r18
    1c02:	0f 90       	pop	r0
    1c04:	0b be       	out	0x3b, r0	; 59
    1c06:	0f 90       	pop	r0
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	0f 90       	pop	r0
    1c0c:	1f 90       	pop	r1
    1c0e:	18 95       	reti

00001c10 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    1c10:	1f 92       	push	r1
    1c12:	0f 92       	push	r0
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	0f 92       	push	r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	0b b6       	in	r0, 0x3b	; 59
    1c1c:	0f 92       	push	r0
    1c1e:	2f 93       	push	r18
    1c20:	3f 93       	push	r19
    1c22:	4f 93       	push	r20
    1c24:	5f 93       	push	r21
    1c26:	6f 93       	push	r22
    1c28:	7f 93       	push	r23
    1c2a:	8f 93       	push	r24
    1c2c:	9f 93       	push	r25
    1c2e:	af 93       	push	r26
    1c30:	bf 93       	push	r27
    1c32:	ef 93       	push	r30
    1c34:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    1c36:	e0 91 f0 03 	lds	r30, 0x03F0	; 0x8003f0 <tc_tccr1_compa_callback>
    1c3a:	f0 91 f1 03 	lds	r31, 0x03F1	; 0x8003f1 <tc_tccr1_compa_callback+0x1>
    1c3e:	30 97       	sbiw	r30, 0x00	; 0
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <__vector_17+0x34>
		tc_tccr1_compa_callback();
    1c42:	19 95       	eicall
	}
}
    1c44:	ff 91       	pop	r31
    1c46:	ef 91       	pop	r30
    1c48:	bf 91       	pop	r27
    1c4a:	af 91       	pop	r26
    1c4c:	9f 91       	pop	r25
    1c4e:	8f 91       	pop	r24
    1c50:	7f 91       	pop	r23
    1c52:	6f 91       	pop	r22
    1c54:	5f 91       	pop	r21
    1c56:	4f 91       	pop	r20
    1c58:	3f 91       	pop	r19
    1c5a:	2f 91       	pop	r18
    1c5c:	0f 90       	pop	r0
    1c5e:	0b be       	out	0x3b, r0	; 59
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	0f 90       	pop	r0
    1c66:	1f 90       	pop	r1
    1c68:	18 95       	reti

00001c6a <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    1c6a:	1f 92       	push	r1
    1c6c:	0f 92       	push	r0
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	0f 92       	push	r0
    1c72:	11 24       	eor	r1, r1
    1c74:	0b b6       	in	r0, 0x3b	; 59
    1c76:	0f 92       	push	r0
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    1c90:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <tc_tccr1_compb_callback>
    1c94:	f0 91 ef 03 	lds	r31, 0x03EF	; 0x8003ef <tc_tccr1_compb_callback+0x1>
    1c98:	30 97       	sbiw	r30, 0x00	; 0
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <__vector_18+0x34>
		tc_tccr1_compb_callback();
    1c9c:	19 95       	eicall
	}
}
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0b be       	out	0x3b, r0	; 59
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    1cc4:	1f 92       	push	r1
    1cc6:	0f 92       	push	r0
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	0f 92       	push	r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	0b b6       	in	r0, 0x3b	; 59
    1cd0:	0f 92       	push	r0
    1cd2:	2f 93       	push	r18
    1cd4:	3f 93       	push	r19
    1cd6:	4f 93       	push	r20
    1cd8:	5f 93       	push	r21
    1cda:	6f 93       	push	r22
    1cdc:	7f 93       	push	r23
    1cde:	8f 93       	push	r24
    1ce0:	9f 93       	push	r25
    1ce2:	af 93       	push	r26
    1ce4:	bf 93       	push	r27
    1ce6:	ef 93       	push	r30
    1ce8:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    1cea:	e0 91 ec 03 	lds	r30, 0x03EC	; 0x8003ec <tc_tccr1_compc_callback>
    1cee:	f0 91 ed 03 	lds	r31, 0x03ED	; 0x8003ed <tc_tccr1_compc_callback+0x1>
    1cf2:	30 97       	sbiw	r30, 0x00	; 0
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <__vector_19+0x34>
		tc_tccr1_compc_callback();
    1cf6:	19 95       	eicall
	}
}
    1cf8:	ff 91       	pop	r31
    1cfa:	ef 91       	pop	r30
    1cfc:	bf 91       	pop	r27
    1cfe:	af 91       	pop	r26
    1d00:	9f 91       	pop	r25
    1d02:	8f 91       	pop	r24
    1d04:	7f 91       	pop	r23
    1d06:	6f 91       	pop	r22
    1d08:	5f 91       	pop	r21
    1d0a:	4f 91       	pop	r20
    1d0c:	3f 91       	pop	r19
    1d0e:	2f 91       	pop	r18
    1d10:	0f 90       	pop	r0
    1d12:	0b be       	out	0x3b, r0	; 59
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	0b b6       	in	r0, 0x3b	; 59
    1d2a:	0f 92       	push	r0
    1d2c:	2f 93       	push	r18
    1d2e:	3f 93       	push	r19
    1d30:	4f 93       	push	r20
    1d32:	5f 93       	push	r21
    1d34:	6f 93       	push	r22
    1d36:	7f 93       	push	r23
    1d38:	8f 93       	push	r24
    1d3a:	9f 93       	push	r25
    1d3c:	af 93       	push	r26
    1d3e:	bf 93       	push	r27
    1d40:	ef 93       	push	r30
    1d42:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    1d44:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <tc_tccr3_ovf_callback>
    1d48:	f0 91 eb 03 	lds	r31, 0x03EB	; 0x8003eb <tc_tccr3_ovf_callback+0x1>
    1d4c:	30 97       	sbiw	r30, 0x00	; 0
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    1d50:	19 95       	eicall
	}
}
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	bf 91       	pop	r27
    1d58:	af 91       	pop	r26
    1d5a:	9f 91       	pop	r25
    1d5c:	8f 91       	pop	r24
    1d5e:	7f 91       	pop	r23
    1d60:	6f 91       	pop	r22
    1d62:	5f 91       	pop	r21
    1d64:	4f 91       	pop	r20
    1d66:	3f 91       	pop	r19
    1d68:	2f 91       	pop	r18
    1d6a:	0f 90       	pop	r0
    1d6c:	0b be       	out	0x3b, r0	; 59
    1d6e:	0f 90       	pop	r0
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	0f 90       	pop	r0
    1d74:	1f 90       	pop	r1
    1d76:	18 95       	reti

00001d78 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    1d78:	1f 92       	push	r1
    1d7a:	0f 92       	push	r0
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	0f 92       	push	r0
    1d80:	11 24       	eor	r1, r1
    1d82:	0b b6       	in	r0, 0x3b	; 59
    1d84:	0f 92       	push	r0
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    1d9e:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <tc_tccr3_compa_callback>
    1da2:	f0 91 e9 03 	lds	r31, 0x03E9	; 0x8003e9 <tc_tccr3_compa_callback+0x1>
    1da6:	30 97       	sbiw	r30, 0x00	; 0
    1da8:	09 f0       	breq	.+2      	; 0x1dac <__vector_32+0x34>
		tc_tccr3_compa_callback();
    1daa:	19 95       	eicall
	}
}
    1dac:	ff 91       	pop	r31
    1dae:	ef 91       	pop	r30
    1db0:	bf 91       	pop	r27
    1db2:	af 91       	pop	r26
    1db4:	9f 91       	pop	r25
    1db6:	8f 91       	pop	r24
    1db8:	7f 91       	pop	r23
    1dba:	6f 91       	pop	r22
    1dbc:	5f 91       	pop	r21
    1dbe:	4f 91       	pop	r20
    1dc0:	3f 91       	pop	r19
    1dc2:	2f 91       	pop	r18
    1dc4:	0f 90       	pop	r0
    1dc6:	0b be       	out	0x3b, r0	; 59
    1dc8:	0f 90       	pop	r0
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	0f 90       	pop	r0
    1dce:	1f 90       	pop	r1
    1dd0:	18 95       	reti

00001dd2 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    1dd2:	1f 92       	push	r1
    1dd4:	0f 92       	push	r0
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	0f 92       	push	r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	0b b6       	in	r0, 0x3b	; 59
    1dde:	0f 92       	push	r0
    1de0:	2f 93       	push	r18
    1de2:	3f 93       	push	r19
    1de4:	4f 93       	push	r20
    1de6:	5f 93       	push	r21
    1de8:	6f 93       	push	r22
    1dea:	7f 93       	push	r23
    1dec:	8f 93       	push	r24
    1dee:	9f 93       	push	r25
    1df0:	af 93       	push	r26
    1df2:	bf 93       	push	r27
    1df4:	ef 93       	push	r30
    1df6:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    1df8:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <tc_tccr3_compb_callback>
    1dfc:	f0 91 e7 03 	lds	r31, 0x03E7	; 0x8003e7 <tc_tccr3_compb_callback+0x1>
    1e00:	30 97       	sbiw	r30, 0x00	; 0
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    1e04:	19 95       	eicall
	}
}
    1e06:	ff 91       	pop	r31
    1e08:	ef 91       	pop	r30
    1e0a:	bf 91       	pop	r27
    1e0c:	af 91       	pop	r26
    1e0e:	9f 91       	pop	r25
    1e10:	8f 91       	pop	r24
    1e12:	7f 91       	pop	r23
    1e14:	6f 91       	pop	r22
    1e16:	5f 91       	pop	r21
    1e18:	4f 91       	pop	r20
    1e1a:	3f 91       	pop	r19
    1e1c:	2f 91       	pop	r18
    1e1e:	0f 90       	pop	r0
    1e20:	0b be       	out	0x3b, r0	; 59
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti

00001e2c <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    1e2c:	1f 92       	push	r1
    1e2e:	0f 92       	push	r0
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	0f 92       	push	r0
    1e34:	11 24       	eor	r1, r1
    1e36:	0b b6       	in	r0, 0x3b	; 59
    1e38:	0f 92       	push	r0
    1e3a:	2f 93       	push	r18
    1e3c:	3f 93       	push	r19
    1e3e:	4f 93       	push	r20
    1e40:	5f 93       	push	r21
    1e42:	6f 93       	push	r22
    1e44:	7f 93       	push	r23
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	af 93       	push	r26
    1e4c:	bf 93       	push	r27
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    1e52:	e0 91 e4 03 	lds	r30, 0x03E4	; 0x8003e4 <tc_tccr3_compc_callback>
    1e56:	f0 91 e5 03 	lds	r31, 0x03E5	; 0x8003e5 <tc_tccr3_compc_callback+0x1>
    1e5a:	30 97       	sbiw	r30, 0x00	; 0
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <__vector_34+0x34>
		tc_tccr3_compc_callback();
    1e5e:	19 95       	eicall
	}
}
    1e60:	ff 91       	pop	r31
    1e62:	ef 91       	pop	r30
    1e64:	bf 91       	pop	r27
    1e66:	af 91       	pop	r26
    1e68:	9f 91       	pop	r25
    1e6a:	8f 91       	pop	r24
    1e6c:	7f 91       	pop	r23
    1e6e:	6f 91       	pop	r22
    1e70:	5f 91       	pop	r21
    1e72:	4f 91       	pop	r20
    1e74:	3f 91       	pop	r19
    1e76:	2f 91       	pop	r18
    1e78:	0f 90       	pop	r0
    1e7a:	0b be       	out	0x3b, r0	; 59
    1e7c:	0f 90       	pop	r0
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	0f 90       	pop	r0
    1e82:	1f 90       	pop	r1
    1e84:	18 95       	reti

00001e86 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    1e86:	1f 92       	push	r1
    1e88:	0f 92       	push	r0
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	0f 92       	push	r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	0b b6       	in	r0, 0x3b	; 59
    1e92:	0f 92       	push	r0
    1e94:	2f 93       	push	r18
    1e96:	3f 93       	push	r19
    1e98:	4f 93       	push	r20
    1e9a:	5f 93       	push	r21
    1e9c:	6f 93       	push	r22
    1e9e:	7f 93       	push	r23
    1ea0:	8f 93       	push	r24
    1ea2:	9f 93       	push	r25
    1ea4:	af 93       	push	r26
    1ea6:	bf 93       	push	r27
    1ea8:	ef 93       	push	r30
    1eaa:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    1eac:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <tc_tccr4_ovf_callback>
    1eb0:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <tc_tccr4_ovf_callback+0x1>
    1eb4:	30 97       	sbiw	r30, 0x00	; 0
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    1eb8:	19 95       	eicall
	}
}
    1eba:	ff 91       	pop	r31
    1ebc:	ef 91       	pop	r30
    1ebe:	bf 91       	pop	r27
    1ec0:	af 91       	pop	r26
    1ec2:	9f 91       	pop	r25
    1ec4:	8f 91       	pop	r24
    1ec6:	7f 91       	pop	r23
    1ec8:	6f 91       	pop	r22
    1eca:	5f 91       	pop	r21
    1ecc:	4f 91       	pop	r20
    1ece:	3f 91       	pop	r19
    1ed0:	2f 91       	pop	r18
    1ed2:	0f 90       	pop	r0
    1ed4:	0b be       	out	0x3b, r0	; 59
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	0f 90       	pop	r0
    1edc:	1f 90       	pop	r1
    1ede:	18 95       	reti

00001ee0 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    1ee0:	1f 92       	push	r1
    1ee2:	0f 92       	push	r0
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	0f 92       	push	r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	0b b6       	in	r0, 0x3b	; 59
    1eec:	0f 92       	push	r0
    1eee:	2f 93       	push	r18
    1ef0:	3f 93       	push	r19
    1ef2:	4f 93       	push	r20
    1ef4:	5f 93       	push	r21
    1ef6:	6f 93       	push	r22
    1ef8:	7f 93       	push	r23
    1efa:	8f 93       	push	r24
    1efc:	9f 93       	push	r25
    1efe:	af 93       	push	r26
    1f00:	bf 93       	push	r27
    1f02:	ef 93       	push	r30
    1f04:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    1f06:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <tc_tccr4_compa_callback>
    1f0a:	f0 91 e1 03 	lds	r31, 0x03E1	; 0x8003e1 <tc_tccr4_compa_callback+0x1>
    1f0e:	30 97       	sbiw	r30, 0x00	; 0
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <__vector_42+0x34>
		tc_tccr4_compa_callback();
    1f12:	19 95       	eicall
	}
}
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0b be       	out	0x3b, r0	; 59
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	0f 90       	pop	r0
    1f36:	1f 90       	pop	r1
    1f38:	18 95       	reti

00001f3a <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    1f3a:	1f 92       	push	r1
    1f3c:	0f 92       	push	r0
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	0f 92       	push	r0
    1f42:	11 24       	eor	r1, r1
    1f44:	0b b6       	in	r0, 0x3b	; 59
    1f46:	0f 92       	push	r0
    1f48:	2f 93       	push	r18
    1f4a:	3f 93       	push	r19
    1f4c:	4f 93       	push	r20
    1f4e:	5f 93       	push	r21
    1f50:	6f 93       	push	r22
    1f52:	7f 93       	push	r23
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    1f60:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <tc_tccr4_compb_callback>
    1f64:	f0 91 df 03 	lds	r31, 0x03DF	; 0x8003df <tc_tccr4_compb_callback+0x1>
    1f68:	30 97       	sbiw	r30, 0x00	; 0
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <__vector_43+0x34>
		tc_tccr4_compb_callback();
    1f6c:	19 95       	eicall
	}
}
    1f6e:	ff 91       	pop	r31
    1f70:	ef 91       	pop	r30
    1f72:	bf 91       	pop	r27
    1f74:	af 91       	pop	r26
    1f76:	9f 91       	pop	r25
    1f78:	8f 91       	pop	r24
    1f7a:	7f 91       	pop	r23
    1f7c:	6f 91       	pop	r22
    1f7e:	5f 91       	pop	r21
    1f80:	4f 91       	pop	r20
    1f82:	3f 91       	pop	r19
    1f84:	2f 91       	pop	r18
    1f86:	0f 90       	pop	r0
    1f88:	0b be       	out	0x3b, r0	; 59
    1f8a:	0f 90       	pop	r0
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	0f 90       	pop	r0
    1f90:	1f 90       	pop	r1
    1f92:	18 95       	reti

00001f94 <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    1f94:	1f 92       	push	r1
    1f96:	0f 92       	push	r0
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	0f 92       	push	r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	0b b6       	in	r0, 0x3b	; 59
    1fa0:	0f 92       	push	r0
    1fa2:	2f 93       	push	r18
    1fa4:	3f 93       	push	r19
    1fa6:	4f 93       	push	r20
    1fa8:	5f 93       	push	r21
    1faa:	6f 93       	push	r22
    1fac:	7f 93       	push	r23
    1fae:	8f 93       	push	r24
    1fb0:	9f 93       	push	r25
    1fb2:	af 93       	push	r26
    1fb4:	bf 93       	push	r27
    1fb6:	ef 93       	push	r30
    1fb8:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    1fba:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <tc_tccr4_compc_callback>
    1fbe:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <tc_tccr4_compc_callback+0x1>
    1fc2:	30 97       	sbiw	r30, 0x00	; 0
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <__vector_44+0x34>
		tc_tccr4_compc_callback();
    1fc6:	19 95       	eicall
	}
}
    1fc8:	ff 91       	pop	r31
    1fca:	ef 91       	pop	r30
    1fcc:	bf 91       	pop	r27
    1fce:	af 91       	pop	r26
    1fd0:	9f 91       	pop	r25
    1fd2:	8f 91       	pop	r24
    1fd4:	7f 91       	pop	r23
    1fd6:	6f 91       	pop	r22
    1fd8:	5f 91       	pop	r21
    1fda:	4f 91       	pop	r20
    1fdc:	3f 91       	pop	r19
    1fde:	2f 91       	pop	r18
    1fe0:	0f 90       	pop	r0
    1fe2:	0b be       	out	0x3b, r0	; 59
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti

00001fee <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    1fee:	1f 92       	push	r1
    1ff0:	0f 92       	push	r0
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	0f 92       	push	r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	0b b6       	in	r0, 0x3b	; 59
    1ffa:	0f 92       	push	r0
    1ffc:	2f 93       	push	r18
    1ffe:	3f 93       	push	r19
    2000:	4f 93       	push	r20
    2002:	5f 93       	push	r21
    2004:	6f 93       	push	r22
    2006:	7f 93       	push	r23
    2008:	8f 93       	push	r24
    200a:	9f 93       	push	r25
    200c:	af 93       	push	r26
    200e:	bf 93       	push	r27
    2010:	ef 93       	push	r30
    2012:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    2014:	e0 91 da 03 	lds	r30, 0x03DA	; 0x8003da <tc_tccr5_ovf_callback>
    2018:	f0 91 db 03 	lds	r31, 0x03DB	; 0x8003db <tc_tccr5_ovf_callback+0x1>
    201c:	30 97       	sbiw	r30, 0x00	; 0
    201e:	09 f0       	breq	.+2      	; 0x2022 <__EEPROM_REGION_LENGTH__+0x22>
		tc_tccr5_ovf_callback();
    2020:	19 95       	eicall
	}
}
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	bf 91       	pop	r27
    2028:	af 91       	pop	r26
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	7f 91       	pop	r23
    2030:	6f 91       	pop	r22
    2032:	5f 91       	pop	r21
    2034:	4f 91       	pop	r20
    2036:	3f 91       	pop	r19
    2038:	2f 91       	pop	r18
    203a:	0f 90       	pop	r0
    203c:	0b be       	out	0x3b, r0	; 59
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	0b b6       	in	r0, 0x3b	; 59
    2054:	0f 92       	push	r0
    2056:	2f 93       	push	r18
    2058:	3f 93       	push	r19
    205a:	4f 93       	push	r20
    205c:	5f 93       	push	r21
    205e:	6f 93       	push	r22
    2060:	7f 93       	push	r23
    2062:	8f 93       	push	r24
    2064:	9f 93       	push	r25
    2066:	af 93       	push	r26
    2068:	bf 93       	push	r27
    206a:	ef 93       	push	r30
    206c:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    206e:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <tc_tccr5_compa_callback>
    2072:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <tc_tccr5_compa_callback+0x1>
    2076:	30 97       	sbiw	r30, 0x00	; 0
    2078:	09 f0       	breq	.+2      	; 0x207c <__vector_47+0x34>
		tc_tccr5_compa_callback();
    207a:	19 95       	eicall
	}
}
    207c:	ff 91       	pop	r31
    207e:	ef 91       	pop	r30
    2080:	bf 91       	pop	r27
    2082:	af 91       	pop	r26
    2084:	9f 91       	pop	r25
    2086:	8f 91       	pop	r24
    2088:	7f 91       	pop	r23
    208a:	6f 91       	pop	r22
    208c:	5f 91       	pop	r21
    208e:	4f 91       	pop	r20
    2090:	3f 91       	pop	r19
    2092:	2f 91       	pop	r18
    2094:	0f 90       	pop	r0
    2096:	0b be       	out	0x3b, r0	; 59
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	0f 90       	pop	r0
    209e:	1f 90       	pop	r1
    20a0:	18 95       	reti

000020a2 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    20a2:	1f 92       	push	r1
    20a4:	0f 92       	push	r0
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	0f 92       	push	r0
    20aa:	11 24       	eor	r1, r1
    20ac:	0b b6       	in	r0, 0x3b	; 59
    20ae:	0f 92       	push	r0
    20b0:	2f 93       	push	r18
    20b2:	3f 93       	push	r19
    20b4:	4f 93       	push	r20
    20b6:	5f 93       	push	r21
    20b8:	6f 93       	push	r22
    20ba:	7f 93       	push	r23
    20bc:	8f 93       	push	r24
    20be:	9f 93       	push	r25
    20c0:	af 93       	push	r26
    20c2:	bf 93       	push	r27
    20c4:	ef 93       	push	r30
    20c6:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    20c8:	e0 91 d6 03 	lds	r30, 0x03D6	; 0x8003d6 <tc_tccr5_compb_callback>
    20cc:	f0 91 d7 03 	lds	r31, 0x03D7	; 0x8003d7 <tc_tccr5_compb_callback+0x1>
    20d0:	30 97       	sbiw	r30, 0x00	; 0
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    20d4:	19 95       	eicall
	}
}
    20d6:	ff 91       	pop	r31
    20d8:	ef 91       	pop	r30
    20da:	bf 91       	pop	r27
    20dc:	af 91       	pop	r26
    20de:	9f 91       	pop	r25
    20e0:	8f 91       	pop	r24
    20e2:	7f 91       	pop	r23
    20e4:	6f 91       	pop	r22
    20e6:	5f 91       	pop	r21
    20e8:	4f 91       	pop	r20
    20ea:	3f 91       	pop	r19
    20ec:	2f 91       	pop	r18
    20ee:	0f 90       	pop	r0
    20f0:	0b be       	out	0x3b, r0	; 59
    20f2:	0f 90       	pop	r0
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	0f 90       	pop	r0
    20f8:	1f 90       	pop	r1
    20fa:	18 95       	reti

000020fc <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    20fc:	1f 92       	push	r1
    20fe:	0f 92       	push	r0
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	0f 92       	push	r0
    2104:	11 24       	eor	r1, r1
    2106:	0b b6       	in	r0, 0x3b	; 59
    2108:	0f 92       	push	r0
    210a:	2f 93       	push	r18
    210c:	3f 93       	push	r19
    210e:	4f 93       	push	r20
    2110:	5f 93       	push	r21
    2112:	6f 93       	push	r22
    2114:	7f 93       	push	r23
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	af 93       	push	r26
    211c:	bf 93       	push	r27
    211e:	ef 93       	push	r30
    2120:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    2122:	e0 91 d4 03 	lds	r30, 0x03D4	; 0x8003d4 <tc_tccr5_compc_callback>
    2126:	f0 91 d5 03 	lds	r31, 0x03D5	; 0x8003d5 <tc_tccr5_compc_callback+0x1>
    212a:	30 97       	sbiw	r30, 0x00	; 0
    212c:	09 f0       	breq	.+2      	; 0x2130 <__vector_49+0x34>
		tc_tccr5_compc_callback();
    212e:	19 95       	eicall
	}
}
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	bf 91       	pop	r27
    2136:	af 91       	pop	r26
    2138:	9f 91       	pop	r25
    213a:	8f 91       	pop	r24
    213c:	7f 91       	pop	r23
    213e:	6f 91       	pop	r22
    2140:	5f 91       	pop	r21
    2142:	4f 91       	pop	r20
    2144:	3f 91       	pop	r19
    2146:	2f 91       	pop	r18
    2148:	0f 90       	pop	r0
    214a:	0b be       	out	0x3b, r0	; 59
    214c:	0f 90       	pop	r0
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	0f 90       	pop	r0
    2152:	1f 90       	pop	r1
    2154:	18 95       	reti

00002156 <tc_enable>:

void tc_enable(volatile void *tc)
{
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	1f 92       	push	r1
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2162:	2f b7       	in	r18, 0x3f	; 63
    2164:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2166:	f8 94       	cli
	return flags;
    2168:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	09 f4       	brne	.+2      	; 0x2170 <tc_enable+0x1a>
    216e:	64 c0       	rjmp	.+200    	; 0x2238 <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    2170:	88 37       	cpi	r24, 0x78	; 120
    2172:	91 05       	cpc	r25, r1
    2174:	49 f4       	brne	.+18     	; 0x2188 <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    217e:	60 e1       	ldi	r22, 0x10	; 16
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    2186:	58 c0       	rjmp	.+176    	; 0x2238 <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2188:	80 3c       	cpi	r24, 0xC0	; 192
    218a:	91 05       	cpc	r25, r1
    218c:	29 f4       	brne	.+10     	; 0x2198 <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    218e:	62 e0       	ldi	r22, 0x02	; 2
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    2196:	50 c0       	rjmp	.+160    	; 0x2238 <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2198:	8c 34       	cpi	r24, 0x4C	; 76
    219a:	91 05       	cpc	r25, r1
    219c:	29 f4       	brne	.+10     	; 0x21a8 <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    219e:	64 e0       	ldi	r22, 0x04	; 4
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    21a6:	48 c0       	rjmp	.+144    	; 0x2238 <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    21a8:	80 38       	cpi	r24, 0x80	; 128
    21aa:	91 05       	cpc	r25, r1
    21ac:	29 f4       	brne	.+10     	; 0x21b8 <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    21ae:	68 e0       	ldi	r22, 0x08	; 8
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    21b6:	40 c0       	rjmp	.+128    	; 0x2238 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    21b8:	84 34       	cpi	r24, 0x44	; 68
    21ba:	91 05       	cpc	r25, r1
    21bc:	29 f4       	brne	.+10     	; 0x21c8 <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    21be:	60 e2       	ldi	r22, 0x20	; 32
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    21c6:	38 c0       	rjmp	.+112    	; 0x2238 <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    21c8:	80 3b       	cpi	r24, 0xB0	; 176
    21ca:	91 05       	cpc	r25, r1
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    21ce:	60 e4       	ldi	r22, 0x40	; 64
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    21d6:	30 c0       	rjmp	.+96     	; 0x2238 <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    21d8:	88 3b       	cpi	r24, 0xB8	; 184
    21da:	91 05       	cpc	r25, r1
    21dc:	29 f4       	brne	.+10     	; 0x21e8 <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    21de:	60 e8       	ldi	r22, 0x80	; 128
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    21e6:	28 c0       	rjmp	.+80     	; 0x2238 <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    21e8:	88 3c       	cpi	r24, 0xC8	; 200
    21ea:	91 05       	cpc	r25, r1
    21ec:	29 f4       	brne	.+10     	; 0x21f8 <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    21f6:	20 c0       	rjmp	.+64     	; 0x2238 <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    21f8:	80 39       	cpi	r24, 0x90	; 144
    21fa:	91 05       	cpc	r25, r1
    21fc:	29 f4       	brne	.+10     	; 0x2208 <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    21fe:	68 e0       	ldi	r22, 0x08	; 8
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    2206:	18 c0       	rjmp	.+48     	; 0x2238 <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    2208:	80 3a       	cpi	r24, 0xA0	; 160
    220a:	91 05       	cpc	r25, r1
    220c:	29 f4       	brne	.+10     	; 0x2218 <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    220e:	60 e1       	ldi	r22, 0x10	; 16
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    2216:	10 c0       	rjmp	.+32     	; 0x2238 <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    2218:	80 32       	cpi	r24, 0x20	; 32
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	92 07       	cpc	r25, r18
    221e:	29 f4       	brne	.+10     	; 0x222a <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    2220:	60 e2       	ldi	r22, 0x20	; 32
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
    2228:	07 c0       	rjmp	.+14     	; 0x2238 <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    222a:	83 34       	cpi	r24, 0x43	; 67
    222c:	91 40       	sbci	r25, 0x01	; 1
    222e:	21 f4       	brne	.+8      	; 0x2238 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    2230:	60 e4       	ldi	r22, 0x40	; 64
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	0e 94 a6 02 	call	0x54c	; 0x54c <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2238:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    223a:	0f 90       	pop	r0
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	08 95       	ret

00002244 <tc_disable>:

void tc_disable(volatile void *tc)
{
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	1f 92       	push	r1
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2250:	2f b7       	in	r18, 0x3f	; 63
    2252:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2254:	f8 94       	cli
	return flags;
    2256:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	09 f4       	brne	.+2      	; 0x225e <tc_disable+0x1a>
    225c:	64 c0       	rjmp	.+200    	; 0x2326 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    225e:	88 37       	cpi	r24, 0x78	; 120
    2260:	91 05       	cpc	r25, r1
    2262:	49 f4       	brne	.+18     	; 0x2276 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    2264:	61 e0       	ldi	r22, 0x01	; 1
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    226c:	60 e1       	ldi	r22, 0x10	; 16
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    2274:	58 c0       	rjmp	.+176    	; 0x2326 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2276:	80 3c       	cpi	r24, 0xC0	; 192
    2278:	91 05       	cpc	r25, r1
    227a:	29 f4       	brne	.+10     	; 0x2286 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    227c:	62 e0       	ldi	r22, 0x02	; 2
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    2284:	50 c0       	rjmp	.+160    	; 0x2326 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2286:	8c 34       	cpi	r24, 0x4C	; 76
    2288:	91 05       	cpc	r25, r1
    228a:	29 f4       	brne	.+10     	; 0x2296 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    228c:	64 e0       	ldi	r22, 0x04	; 4
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    2294:	48 c0       	rjmp	.+144    	; 0x2326 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    2296:	80 38       	cpi	r24, 0x80	; 128
    2298:	91 05       	cpc	r25, r1
    229a:	29 f4       	brne	.+10     	; 0x22a6 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    229c:	68 e0       	ldi	r22, 0x08	; 8
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    22a4:	40 c0       	rjmp	.+128    	; 0x2326 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    22a6:	84 34       	cpi	r24, 0x44	; 68
    22a8:	91 05       	cpc	r25, r1
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    22ac:	60 e2       	ldi	r22, 0x20	; 32
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    22b4:	38 c0       	rjmp	.+112    	; 0x2326 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    22b6:	80 3b       	cpi	r24, 0xB0	; 176
    22b8:	91 05       	cpc	r25, r1
    22ba:	29 f4       	brne	.+10     	; 0x22c6 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    22bc:	60 e4       	ldi	r22, 0x40	; 64
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    22c4:	30 c0       	rjmp	.+96     	; 0x2326 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    22c6:	88 3b       	cpi	r24, 0xB8	; 184
    22c8:	91 05       	cpc	r25, r1
    22ca:	29 f4       	brne	.+10     	; 0x22d6 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    22cc:	60 e8       	ldi	r22, 0x80	; 128
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    22d4:	28 c0       	rjmp	.+80     	; 0x2326 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    22d6:	88 3c       	cpi	r24, 0xC8	; 200
    22d8:	91 05       	cpc	r25, r1
    22da:	29 f4       	brne	.+10     	; 0x22e6 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    22e4:	20 c0       	rjmp	.+64     	; 0x2326 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    22e6:	80 39       	cpi	r24, 0x90	; 144
    22e8:	91 05       	cpc	r25, r1
    22ea:	29 f4       	brne	.+10     	; 0x22f6 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    22ec:	68 e0       	ldi	r22, 0x08	; 8
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    22f4:	18 c0       	rjmp	.+48     	; 0x2326 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    22f6:	80 3a       	cpi	r24, 0xA0	; 160
    22f8:	91 05       	cpc	r25, r1
    22fa:	29 f4       	brne	.+10     	; 0x2306 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    22fc:	60 e1       	ldi	r22, 0x10	; 16
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    2304:	10 c0       	rjmp	.+32     	; 0x2326 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    2306:	80 32       	cpi	r24, 0x20	; 32
    2308:	21 e0       	ldi	r18, 0x01	; 1
    230a:	92 07       	cpc	r25, r18
    230c:	29 f4       	brne	.+10     	; 0x2318 <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    230e:	60 e2       	ldi	r22, 0x20	; 32
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
    2316:	07 c0       	rjmp	.+14     	; 0x2326 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    2318:	83 34       	cpi	r24, 0x43	; 67
    231a:	91 40       	sbci	r25, 0x01	; 1
    231c:	21 f4       	brne	.+8      	; 0x2326 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    231e:	60 e4       	ldi	r22, 0x40	; 64
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	0e 94 be 02 	call	0x57c	; 0x57c <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2326:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    2328:	0f 90       	pop	r0
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	1f 91       	pop	r17
    2330:	08 95       	ret

00002332 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2332:	80 38       	cpi	r24, 0x80	; 128
    2334:	91 05       	cpc	r25, r1
    2336:	29 f4       	brne	.+10     	; 0x2342 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    2338:	70 93 f3 03 	sts	0x03F3, r23	; 0x8003f3 <tc_tccr1_ovf_callback+0x1>
    233c:	60 93 f2 03 	sts	0x03F2, r22	; 0x8003f2 <tc_tccr1_ovf_callback>
    2340:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2342:	80 39       	cpi	r24, 0x90	; 144
    2344:	91 05       	cpc	r25, r1
    2346:	29 f4       	brne	.+10     	; 0x2352 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    2348:	70 93 eb 03 	sts	0x03EB, r23	; 0x8003eb <tc_tccr3_ovf_callback+0x1>
    234c:	60 93 ea 03 	sts	0x03EA, r22	; 0x8003ea <tc_tccr3_ovf_callback>
    2350:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2352:	80 3a       	cpi	r24, 0xA0	; 160
    2354:	91 05       	cpc	r25, r1
    2356:	29 f4       	brne	.+10     	; 0x2362 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    2358:	70 93 e3 03 	sts	0x03E3, r23	; 0x8003e3 <tc_tccr4_ovf_callback+0x1>
    235c:	60 93 e2 03 	sts	0x03E2, r22	; 0x8003e2 <tc_tccr4_ovf_callback>
    2360:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2362:	80 32       	cpi	r24, 0x20	; 32
    2364:	91 40       	sbci	r25, 0x01	; 1
    2366:	21 f4       	brne	.+8      	; 0x2370 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    2368:	70 93 db 03 	sts	0x03DB, r23	; 0x8003db <tc_tccr5_ovf_callback+0x1>
    236c:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <tc_tccr5_ovf_callback>
    2370:	08 95       	ret

00002372 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2372:	80 38       	cpi	r24, 0x80	; 128
    2374:	91 05       	cpc	r25, r1
    2376:	29 f4       	brne	.+10     	; 0x2382 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    2378:	70 93 f1 03 	sts	0x03F1, r23	; 0x8003f1 <tc_tccr1_compa_callback+0x1>
    237c:	60 93 f0 03 	sts	0x03F0, r22	; 0x8003f0 <tc_tccr1_compa_callback>
    2380:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2382:	80 39       	cpi	r24, 0x90	; 144
    2384:	91 05       	cpc	r25, r1
    2386:	29 f4       	brne	.+10     	; 0x2392 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    2388:	70 93 e9 03 	sts	0x03E9, r23	; 0x8003e9 <tc_tccr3_compa_callback+0x1>
    238c:	60 93 e8 03 	sts	0x03E8, r22	; 0x8003e8 <tc_tccr3_compa_callback>
    2390:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2392:	80 3a       	cpi	r24, 0xA0	; 160
    2394:	91 05       	cpc	r25, r1
    2396:	29 f4       	brne	.+10     	; 0x23a2 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    2398:	70 93 e1 03 	sts	0x03E1, r23	; 0x8003e1 <tc_tccr4_compa_callback+0x1>
    239c:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <tc_tccr4_compa_callback>
    23a0:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    23a2:	80 32       	cpi	r24, 0x20	; 32
    23a4:	91 40       	sbci	r25, 0x01	; 1
    23a6:	21 f4       	brne	.+8      	; 0x23b0 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    23a8:	70 93 d9 03 	sts	0x03D9, r23	; 0x8003d9 <tc_tccr5_compa_callback+0x1>
    23ac:	60 93 d8 03 	sts	0x03D8, r22	; 0x8003d8 <tc_tccr5_compa_callback>
    23b0:	08 95       	ret

000023b2 <main>:
 * \brief Main function of the application
 */
int main(void)
{	
	/* Initialize the Wireless Module */
	wireless_init();    
    23b2:	0e 94 40 02 	call	0x480	; 0x480 <wireless_init>
	
	/*The Modules selected in the wizard are initialized here */
	modules_init();
    23b6:	0e 94 8a 02 	call	0x514	; 0x514 <modules_init>
 * \brief Tasks Handled By the Stack and application are Performed here,this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    23ba:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <pal_task>
	tal_task();
    23be:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <tal_task>
/**
 * \brief Application task
 */
 void app_task(void)
{
	usr_wireless_app_task();
    23c2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <usr_wireless_app_task>
    23c6:	f9 cf       	rjmp	.-14     	; 0x23ba <main+0x8>

000023c8 <tal_tx_frame_done_cb>:
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    23c8:	0c 94 3b 02 	jmp	0x476	; 0x476 <usr_frame_transmitted_cb>
    23cc:	08 95       	ret

000023ce <tal_rx_frame_cb>:
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 *
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	ec 01       	movw	r28, r24
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    23d4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <usr_frame_received_cb>
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	0e 94 a7 04 	call	0x94e	; 0x94e <bmm_buffer_free>
}
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	08 95       	ret

000023e6 <__mulsi3>:
    23e6:	db 01       	movw	r26, r22
    23e8:	8f 93       	push	r24
    23ea:	9f 93       	push	r25
    23ec:	49 d0       	rcall	.+146    	; 0x2480 <__muluhisi3>
    23ee:	bf 91       	pop	r27
    23f0:	af 91       	pop	r26
    23f2:	a2 9f       	mul	r26, r18
    23f4:	80 0d       	add	r24, r0
    23f6:	91 1d       	adc	r25, r1
    23f8:	a3 9f       	mul	r26, r19
    23fa:	90 0d       	add	r25, r0
    23fc:	b2 9f       	mul	r27, r18
    23fe:	90 0d       	add	r25, r0
    2400:	11 24       	eor	r1, r1
    2402:	08 95       	ret

00002404 <__udivmodhi4>:
    2404:	aa 1b       	sub	r26, r26
    2406:	bb 1b       	sub	r27, r27
    2408:	51 e1       	ldi	r21, 0x11	; 17
    240a:	07 c0       	rjmp	.+14     	; 0x241a <__udivmodhi4_ep>

0000240c <__udivmodhi4_loop>:
    240c:	aa 1f       	adc	r26, r26
    240e:	bb 1f       	adc	r27, r27
    2410:	a6 17       	cp	r26, r22
    2412:	b7 07       	cpc	r27, r23
    2414:	10 f0       	brcs	.+4      	; 0x241a <__udivmodhi4_ep>
    2416:	a6 1b       	sub	r26, r22
    2418:	b7 0b       	sbc	r27, r23

0000241a <__udivmodhi4_ep>:
    241a:	88 1f       	adc	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	5a 95       	dec	r21
    2420:	a9 f7       	brne	.-22     	; 0x240c <__udivmodhi4_loop>
    2422:	80 95       	com	r24
    2424:	90 95       	com	r25
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	08 95       	ret

0000242c <__divmodhi4>:
    242c:	97 fb       	bst	r25, 7
    242e:	07 2e       	mov	r0, r23
    2430:	16 f4       	brtc	.+4      	; 0x2436 <__divmodhi4+0xa>
    2432:	00 94       	com	r0
    2434:	06 d0       	rcall	.+12     	; 0x2442 <__divmodhi4_neg1>
    2436:	77 fd       	sbrc	r23, 7
    2438:	08 d0       	rcall	.+16     	; 0x244a <__divmodhi4_neg2>
    243a:	e4 df       	rcall	.-56     	; 0x2404 <__udivmodhi4>
    243c:	07 fc       	sbrc	r0, 7
    243e:	05 d0       	rcall	.+10     	; 0x244a <__divmodhi4_neg2>
    2440:	3e f4       	brtc	.+14     	; 0x2450 <__divmodhi4_exit>

00002442 <__divmodhi4_neg1>:
    2442:	90 95       	com	r25
    2444:	81 95       	neg	r24
    2446:	9f 4f       	sbci	r25, 0xFF	; 255
    2448:	08 95       	ret

0000244a <__divmodhi4_neg2>:
    244a:	70 95       	com	r23
    244c:	61 95       	neg	r22
    244e:	7f 4f       	sbci	r23, 0xFF	; 255

00002450 <__divmodhi4_exit>:
    2450:	08 95       	ret

00002452 <__tablejump2__>:
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	88 1f       	adc	r24, r24
    2458:	8b bf       	out	0x3b, r24	; 59
    245a:	07 90       	elpm	r0, Z+
    245c:	f6 91       	elpm	r31, Z
    245e:	e0 2d       	mov	r30, r0
    2460:	19 94       	eijmp

00002462 <__umulhisi3>:
    2462:	a2 9f       	mul	r26, r18
    2464:	b0 01       	movw	r22, r0
    2466:	b3 9f       	mul	r27, r19
    2468:	c0 01       	movw	r24, r0
    246a:	a3 9f       	mul	r26, r19
    246c:	70 0d       	add	r23, r0
    246e:	81 1d       	adc	r24, r1
    2470:	11 24       	eor	r1, r1
    2472:	91 1d       	adc	r25, r1
    2474:	b2 9f       	mul	r27, r18
    2476:	70 0d       	add	r23, r0
    2478:	81 1d       	adc	r24, r1
    247a:	11 24       	eor	r1, r1
    247c:	91 1d       	adc	r25, r1
    247e:	08 95       	ret

00002480 <__muluhisi3>:
    2480:	f0 df       	rcall	.-32     	; 0x2462 <__umulhisi3>
    2482:	a5 9f       	mul	r26, r21
    2484:	90 0d       	add	r25, r0
    2486:	b4 9f       	mul	r27, r20
    2488:	90 0d       	add	r25, r0
    248a:	a4 9f       	mul	r26, r20
    248c:	80 0d       	add	r24, r0
    248e:	91 1d       	adc	r25, r1
    2490:	11 24       	eor	r1, r1
    2492:	08 95       	ret

00002494 <__adddi3_s8>:
    2494:	00 24       	eor	r0, r0
    2496:	a7 fd       	sbrc	r26, 7
    2498:	00 94       	com	r0
    249a:	2a 0f       	add	r18, r26
    249c:	30 1d       	adc	r19, r0
    249e:	40 1d       	adc	r20, r0
    24a0:	50 1d       	adc	r21, r0
    24a2:	60 1d       	adc	r22, r0
    24a4:	70 1d       	adc	r23, r0
    24a6:	80 1d       	adc	r24, r0
    24a8:	90 1d       	adc	r25, r0
    24aa:	08 95       	ret

000024ac <__cmpdi2_s8>:
    24ac:	00 24       	eor	r0, r0
    24ae:	a7 fd       	sbrc	r26, 7
    24b0:	00 94       	com	r0
    24b2:	2a 17       	cp	r18, r26
    24b4:	30 05       	cpc	r19, r0
    24b6:	40 05       	cpc	r20, r0
    24b8:	50 05       	cpc	r21, r0
    24ba:	60 05       	cpc	r22, r0
    24bc:	70 05       	cpc	r23, r0
    24be:	80 05       	cpc	r24, r0
    24c0:	90 05       	cpc	r25, r0
    24c2:	08 95       	ret

000024c4 <do_rand>:
    24c4:	8f 92       	push	r8
    24c6:	9f 92       	push	r9
    24c8:	af 92       	push	r10
    24ca:	bf 92       	push	r11
    24cc:	cf 92       	push	r12
    24ce:	df 92       	push	r13
    24d0:	ef 92       	push	r14
    24d2:	ff 92       	push	r15
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	ec 01       	movw	r28, r24
    24da:	68 81       	ld	r22, Y
    24dc:	79 81       	ldd	r23, Y+1	; 0x01
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	61 15       	cp	r22, r1
    24e4:	71 05       	cpc	r23, r1
    24e6:	81 05       	cpc	r24, r1
    24e8:	91 05       	cpc	r25, r1
    24ea:	21 f4       	brne	.+8      	; 0x24f4 <do_rand+0x30>
    24ec:	64 e2       	ldi	r22, 0x24	; 36
    24ee:	79 ed       	ldi	r23, 0xD9	; 217
    24f0:	8b e5       	ldi	r24, 0x5B	; 91
    24f2:	97 e0       	ldi	r25, 0x07	; 7
    24f4:	2d e1       	ldi	r18, 0x1D	; 29
    24f6:	33 ef       	ldi	r19, 0xF3	; 243
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	41 d0       	rcall	.+130    	; 0x2580 <__divmodsi4>
    24fe:	49 01       	movw	r8, r18
    2500:	5a 01       	movw	r10, r20
    2502:	9b 01       	movw	r18, r22
    2504:	ac 01       	movw	r20, r24
    2506:	a7 ea       	ldi	r26, 0xA7	; 167
    2508:	b1 e4       	ldi	r27, 0x41	; 65
    250a:	ba df       	rcall	.-140    	; 0x2480 <__muluhisi3>
    250c:	6b 01       	movw	r12, r22
    250e:	7c 01       	movw	r14, r24
    2510:	ac ee       	ldi	r26, 0xEC	; 236
    2512:	b4 ef       	ldi	r27, 0xF4	; 244
    2514:	a5 01       	movw	r20, r10
    2516:	94 01       	movw	r18, r8
    2518:	51 d0       	rcall	.+162    	; 0x25bc <__mulohisi3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8c 0d       	add	r24, r12
    2520:	9d 1d       	adc	r25, r13
    2522:	ae 1d       	adc	r26, r14
    2524:	bf 1d       	adc	r27, r15
    2526:	b7 ff       	sbrs	r27, 7
    2528:	03 c0       	rjmp	.+6      	; 0x2530 <do_rand+0x6c>
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	a1 09       	sbc	r26, r1
    252e:	b0 48       	sbci	r27, 0x80	; 128
    2530:	88 83       	st	Y, r24
    2532:	99 83       	std	Y+1, r25	; 0x01
    2534:	aa 83       	std	Y+2, r26	; 0x02
    2536:	bb 83       	std	Y+3, r27	; 0x03
    2538:	9f 77       	andi	r25, 0x7F	; 127
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	cf 90       	pop	r12
    2546:	bf 90       	pop	r11
    2548:	af 90       	pop	r10
    254a:	9f 90       	pop	r9
    254c:	8f 90       	pop	r8
    254e:	08 95       	ret

00002550 <rand_r>:
    2550:	b9 cf       	rjmp	.-142    	; 0x24c4 <do_rand>

00002552 <rand>:
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	92 e0       	ldi	r25, 0x02	; 2
    2556:	b6 cf       	rjmp	.-148    	; 0x24c4 <do_rand>

00002558 <srand>:
    2558:	a0 e0       	ldi	r26, 0x00	; 0
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2560:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2564:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    2568:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    256c:	08 95       	ret

0000256e <memcpy>:
    256e:	fb 01       	movw	r30, r22
    2570:	dc 01       	movw	r26, r24
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <memcpy+0xa>
    2574:	01 90       	ld	r0, Z+
    2576:	0d 92       	st	X+, r0
    2578:	41 50       	subi	r20, 0x01	; 1
    257a:	50 40       	sbci	r21, 0x00	; 0
    257c:	d8 f7       	brcc	.-10     	; 0x2574 <memcpy+0x6>
    257e:	08 95       	ret

00002580 <__divmodsi4>:
    2580:	05 2e       	mov	r0, r21
    2582:	97 fb       	bst	r25, 7
    2584:	16 f4       	brtc	.+4      	; 0x258a <__divmodsi4+0xa>
    2586:	00 94       	com	r0
    2588:	0f d0       	rcall	.+30     	; 0x25a8 <__negsi2>
    258a:	57 fd       	sbrc	r21, 7
    258c:	05 d0       	rcall	.+10     	; 0x2598 <__divmodsi4_neg2>
    258e:	1a d0       	rcall	.+52     	; 0x25c4 <__udivmodsi4>
    2590:	07 fc       	sbrc	r0, 7
    2592:	02 d0       	rcall	.+4      	; 0x2598 <__divmodsi4_neg2>
    2594:	46 f4       	brtc	.+16     	; 0x25a6 <__divmodsi4_exit>
    2596:	08 c0       	rjmp	.+16     	; 0x25a8 <__negsi2>

00002598 <__divmodsi4_neg2>:
    2598:	50 95       	com	r21
    259a:	40 95       	com	r20
    259c:	30 95       	com	r19
    259e:	21 95       	neg	r18
    25a0:	3f 4f       	sbci	r19, 0xFF	; 255
    25a2:	4f 4f       	sbci	r20, 0xFF	; 255
    25a4:	5f 4f       	sbci	r21, 0xFF	; 255

000025a6 <__divmodsi4_exit>:
    25a6:	08 95       	ret

000025a8 <__negsi2>:
    25a8:	90 95       	com	r25
    25aa:	80 95       	com	r24
    25ac:	70 95       	com	r23
    25ae:	61 95       	neg	r22
    25b0:	7f 4f       	sbci	r23, 0xFF	; 255
    25b2:	8f 4f       	sbci	r24, 0xFF	; 255
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	08 95       	ret

000025b8 <__mulshisi3>:
    25b8:	b7 ff       	sbrs	r27, 7
    25ba:	62 cf       	rjmp	.-316    	; 0x2480 <__muluhisi3>

000025bc <__mulohisi3>:
    25bc:	61 df       	rcall	.-318    	; 0x2480 <__muluhisi3>
    25be:	82 1b       	sub	r24, r18
    25c0:	93 0b       	sbc	r25, r19
    25c2:	08 95       	ret

000025c4 <__udivmodsi4>:
    25c4:	a1 e2       	ldi	r26, 0x21	; 33
    25c6:	1a 2e       	mov	r1, r26
    25c8:	aa 1b       	sub	r26, r26
    25ca:	bb 1b       	sub	r27, r27
    25cc:	fd 01       	movw	r30, r26
    25ce:	0d c0       	rjmp	.+26     	; 0x25ea <__udivmodsi4_ep>

000025d0 <__udivmodsi4_loop>:
    25d0:	aa 1f       	adc	r26, r26
    25d2:	bb 1f       	adc	r27, r27
    25d4:	ee 1f       	adc	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	a2 17       	cp	r26, r18
    25da:	b3 07       	cpc	r27, r19
    25dc:	e4 07       	cpc	r30, r20
    25de:	f5 07       	cpc	r31, r21
    25e0:	20 f0       	brcs	.+8      	; 0x25ea <__udivmodsi4_ep>
    25e2:	a2 1b       	sub	r26, r18
    25e4:	b3 0b       	sbc	r27, r19
    25e6:	e4 0b       	sbc	r30, r20
    25e8:	f5 0b       	sbc	r31, r21

000025ea <__udivmodsi4_ep>:
    25ea:	66 1f       	adc	r22, r22
    25ec:	77 1f       	adc	r23, r23
    25ee:	88 1f       	adc	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	1a 94       	dec	r1
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <__udivmodsi4_loop>
    25f6:	60 95       	com	r22
    25f8:	70 95       	com	r23
    25fa:	80 95       	com	r24
    25fc:	90 95       	com	r25
    25fe:	9b 01       	movw	r18, r22
    2600:	ac 01       	movw	r20, r24
    2602:	bd 01       	movw	r22, r26
    2604:	cf 01       	movw	r24, r30
    2606:	08 95       	ret

00002608 <_exit>:
    2608:	f8 94       	cli

0000260a <__stop_program>:
    260a:	ff cf       	rjmp	.-2      	; 0x260a <__stop_program>
